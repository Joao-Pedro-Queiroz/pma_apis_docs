{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"Home","text":""},{"location":"#documentacao-dos-microservicos","title":"Documenta\u00e7\u00e3o dos Microservi\u00e7os","text":""},{"location":"#equipe-de-desenvolvedores","title":"Equipe de desenvolvedores","text":"<ul> <li>Jo\u00e3o Pedro Queiroz Viana</li> </ul>"},{"location":"#estrutura-atual-dos-microservicos","title":"Estrutura atual dos microservi\u00e7os","text":"<pre><code>flowchart LR\n    subgraph api [Subnet API]\n        direction TB\n        gateway --&gt; account\n        gateway --&gt; auth:::red\n        gateway --&gt; product\n        gateway --&gt; order\n        gateway --&gt; exchange\n        auth --&gt; account\n        order --&gt; product\n        account --&gt; db@{ shape: cyl, label: \"Database\" }\n        product --&gt; db\n        order --&gt; db\n    end\n    exchange e3@==&gt; 3partyapi:::green@{label: \"3rd-party API\"}\n    internet e2@==&gt; |request| gateway:::orange\n    e2@{ animate: true }\n    e3@{ animate: true }\n    classDef green fill:#cfc\n    classDef orange fill:#FCBE3E</code></pre>"},{"location":"#repositorios","title":"Reposit\u00f3rios","text":"<p>Principal:  https://github.com/Joao-Pedro-Queiroz/pma.25.2</p> Microservice Interface Implementation Account account account-service Auth auth auth-service Gateway gateway-service Product product product-service Order order order-service Exchange exchange-service"},{"location":"accountapi/main/","title":"1. Account API","text":""},{"location":"accountapi/main/#account-api","title":"Account API","text":"<p>A Account API \u00e9 respons\u00e1vel pela gest\u00e3o das contas de usu\u00e1rio no dom\u00ednio <code>store</code>. Ela realiza opera\u00e7\u00f5es de cadastro, consulta, atualiza\u00e7\u00e3o e exclus\u00e3o de contas, servindo como base para autentica\u00e7\u00e3o e relacionamento entre os demais servi\u00e7os (auth, order, product, etc.).</p> <p>Trusted layer e seguran\u00e7a</p> <p>Toda requisi\u00e7\u00e3o externa entra pelo gateway. As rotas <code>/qccount/**</code> s\u00e3o protegidas: \u00e9 obrigat\u00f3rio enviar <code>Authorization: Bearer &lt;jwt&gt;</code>.</p>"},{"location":"accountapi/main/#visao-geral","title":"Vis\u00e3o geral","text":"<ul> <li>Interface (<code>account</code>): define o contrato (DTOs e Feign) consumido por outros m\u00f3dulos/fronts.  </li> <li>Service (<code>account-service</code>): implementa\u00e7\u00e3o REST, regras de neg\u00f3cio, persist\u00eancia (JPA), e migra\u00e7\u00f5es (Flyway).  </li> </ul> <pre><code>classDiagram\n    namespace account {\n        class AccountController {\n            +create(AccountIn accountIn): AccountOut\n            +delete(String id): void\n            +findAll(): List&lt;AccountOut&gt;\n            +findById(String id): AccountOut\n        }\n        class AccountIn {\n            -String name\n            -String email\n            -String password\n        }\n        class AccountOut {\n            -String id\n            -String name\n            -String email\n        }\n    }\n    namespace account-service {\n        class AccountResource {\n            +create(AccountIn accountIn): AccountOut\n            +delete(String id): void\n            +findAll(): List&lt;AccountOut&gt;\n            +findById(String id): AccountOut\n        }\n        class AccountService {\n            +create(AccountIn accountIn): AccountOut\n            +delete(String id): void\n            +findAll(): List&lt;AccountOut&gt;\n            +findById(String id): AccountOut\n        }\n        class AccountRepository {\n            +create(AccountIn accountIn): AccountOut\n            +delete(String id): void\n            +findAll(): List&lt;AccountOut&gt;\n            +findById(String id): AccountOut\n        }\n        class Account {\n            -String id\n            -String name\n            -String email\n            -String password\n            -String sha256\n        }\n        class AccountModel {\n            +create(AccountIn accountIn): AccountOut\n            +delete(String id): void\n            +findAll(): List&lt;AccountOut&gt;\n            +findById(String id): AccountOut\n        }\n    }\n    &lt;&lt;Interface&gt;&gt; AccountController\n    AccountController ..&gt; AccountIn\n    AccountController ..&gt; AccountOut\n\n    &lt;&lt;Interface&gt;&gt; AccountRepository\n    AccountController &lt;|-- AccountResource\n    AccountResource *-- AccountService\n    AccountService *-- AccountRepository\n    AccountService ..&gt; Account\n    AccountService ..&gt; AccountModel\n    AccountRepository ..&gt; AccountModel</code></pre>"},{"location":"accountapi/main/#estrutura-da-requisicao","title":"Estrutura da requisi\u00e7\u00e3o","text":"<pre><code>flowchart LR\n    subgraph api [Trusted Layer]\n        direction TB\n        account e3@==&gt; db@{ shape: cyl, label: \"Database\" }\n    end\n    internet e1@==&gt;|request| account:::red\n    e1@{ animate: true }\n    e3@{ animate: true }\n    classDef red fill:#fcc</code></pre>"},{"location":"accountapi/main/#account","title":"Account","text":"<pre><code>\ud83d\udcc1 api/\n\u2514\u2500\u2500 \ud83d\udcc1 account/\n    \u251c\u2500\u2500 \ud83d\udcc1 src/\n    \u2502   \u2514\u2500\u2500 \ud83d\udcc1 main/\n    \u2502       \u2514\u2500\u2500 \ud83d\udcc1 java/\n    \u2502           \u2514\u2500\u2500 \ud83d\udcc1 store/\n    \u2502               \u2514\u2500\u2500 \ud83d\udcc1 account/\n    \u2502                   \u251c\u2500\u2500 \ud83d\udcc4 AccountController.java\n    \u2502                   \u251c\u2500\u2500 \ud83d\udcc4 AccountIn.java\n    \u2502                   \u2514\u2500\u2500 \ud83d\udcc4 AccountOut.java\n    \u251c\u2500\u2500 \ud83d\udcc4 pom.xml\n    \u2514\u2500\u2500 \ud83d\udcc4 Jenkinsfile\n</code></pre> Source pom.xmlJenkinsfileAccountControllerAccountInAccountOut <pre><code>&lt;?xml version=\"1.0\" encoding=\"UTF-8\"?&gt;\n&lt;project xmlns=\"http://maven.apache.org/POM/4.0.0\" xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\"\n    xsi:schemaLocation=\"http://maven.apache.org/POM/4.0.0 https://maven.apache.org/xsd/maven-4.0.0.xsd\"&gt;\n    &lt;modelVersion&gt;4.0.0&lt;/modelVersion&gt;\n    &lt;parent&gt;\n        &lt;groupId&gt;org.springframework.boot&lt;/groupId&gt;\n        &lt;artifactId&gt;spring-boot-starter-parent&lt;/artifactId&gt;\n        &lt;version&gt;3.5.5&lt;/version&gt;\n        &lt;relativePath/&gt;\n    &lt;/parent&gt;\n\n    &lt;groupId&gt;store&lt;/groupId&gt;\n    &lt;artifactId&gt;account&lt;/artifactId&gt;\n    &lt;version&gt;1.0.0&lt;/version&gt;\n\n    &lt;properties&gt;\n        &lt;java.version&gt;21&lt;/java.version&gt;\n        &lt;spring-cloud.version&gt;2025.0.0&lt;/spring-cloud.version&gt;\n        &lt;maven.compiler.proc&gt;full&lt;/maven.compiler.proc&gt;\n    &lt;/properties&gt;\n\n    &lt;dependencies&gt;\n        &lt;dependency&gt;\n            &lt;groupId&gt;org.springframework.boot&lt;/groupId&gt;\n            &lt;artifactId&gt;spring-boot-starter-web&lt;/artifactId&gt;\n        &lt;/dependency&gt;\n        &lt;dependency&gt;\n            &lt;groupId&gt;org.springframework.cloud&lt;/groupId&gt;\n            &lt;artifactId&gt;spring-cloud-starter-openfeign&lt;/artifactId&gt;\n        &lt;/dependency&gt;\n\n        &lt;dependency&gt;\n            &lt;groupId&gt;org.projectlombok&lt;/groupId&gt;\n            &lt;artifactId&gt;lombok&lt;/artifactId&gt;\n            &lt;optional&gt;true&lt;/optional&gt;\n        &lt;/dependency&gt;\n    &lt;/dependencies&gt;\n\n    &lt;dependencyManagement&gt;\n        &lt;dependencies&gt;\n            &lt;dependency&gt;\n                &lt;groupId&gt;org.springframework.cloud&lt;/groupId&gt;\n                &lt;artifactId&gt;spring-cloud-dependencies&lt;/artifactId&gt;\n                &lt;version&gt;${spring-cloud.version}&lt;/version&gt;\n                &lt;type&gt;pom&lt;/type&gt;\n                &lt;scope&gt;import&lt;/scope&gt;\n            &lt;/dependency&gt;\n        &lt;/dependencies&gt;\n    &lt;/dependencyManagement&gt;\n\n&lt;/project&gt;\n</code></pre> <pre><code>pipeline {\n    agent any\n\n    stages {\n        stage('Build') {\n            steps {\n                sh 'mvn -B -DskipTests clean install'\n            }\n        }\n    }\n\n}\n</code></pre> AccountController.java<pre><code>package store.account;\n\nimport java.util.List;\n\nimport org.springframework.cloud.openfeign.FeignClient;\nimport org.springframework.http.ResponseEntity;\nimport org.springframework.web.bind.annotation.DeleteMapping;\nimport org.springframework.web.bind.annotation.GetMapping;\nimport org.springframework.web.bind.annotation.PathVariable;\nimport org.springframework.web.bind.annotation.PostMapping;\nimport org.springframework.web.bind.annotation.RequestBody;\nimport org.springframework.web.bind.annotation.RequestHeader;\n\n@FeignClient(name = \"account\", url = \"http://account:8080\")\npublic interface AccountController {\n\n    @PostMapping(\"/account\")\n    public ResponseEntity&lt;AccountOut&gt; create(\n        @RequestBody AccountIn in\n    );\n\n    @GetMapping(\"/account/{id}\")\n    public ResponseEntity&lt;AccountOut&gt; findById(\n        @PathVariable(\"id\") String id\n    );\n\n    @PostMapping(\"/account/login\")\n    public ResponseEntity&lt;AccountOut&gt; findByEmailAndPassword(\n        @RequestBody AccountIn in\n    );\n\n    @GetMapping(\"/account\")\n    public ResponseEntity&lt;List&lt;AccountOut&gt;&gt; findAll();\n\n    @DeleteMapping(\"/account/{id}\")\n    public ResponseEntity&lt;Void&gt; delete(\n        @PathVariable(\"id\") String id\n    );\n\n    @GetMapping(\"/account/whoami\")\n    public ResponseEntity&lt;AccountOut&gt; whoAmI(\n        @RequestHeader(value = \"id-account\", required = true) String idAccount\n    );\n\n}\n</code></pre> AccountIn.java<pre><code>package store.account;\n\nimport lombok.Builder;\n\n@Builder\npublic record AccountIn(\n    String name,\n    String email,\n    String password\n) {\n\n}\n</code></pre> AccountOut.java<pre><code>package store.account;\n\nimport lombok.Builder;\n\n@Builder\npublic record AccountOut(\n    String id,\n    String name,\n    String email\n) {\n\n}\n</code></pre> mvn clean install"},{"location":"accountapi/main/#account-service","title":"Account-Service","text":"<pre><code>\ud83d\udcc1 api/\n\u2514\u2500\u2500 \ud83d\udcc1 account-service/\n    \u251c\u2500\u2500 \ud83d\udcc1 k8s/\n    \u2502   \u2514\u2500\u2500 \ud83d\udcc4 k8s.yaml\n    \u251c\u2500\u2500 \ud83d\udcc1 src/\n    \u2502   \u2514\u2500\u2500 \ud83d\udcc1 main/\n    \u2502       \u251c\u2500\u2500 \ud83d\udcc1 java/\n    \u2502       \u2502   \u2514\u2500\u2500 \ud83d\udcc1 store/\n    \u2502       \u2502       \u2514\u2500\u2500 \ud83d\udcc1 account/\n    \u2502       \u2502           \u251c\u2500\u2500 \ud83d\udcc4 Account.java\n    \u2502       \u2502           \u251c\u2500\u2500 \ud83d\udcc4 AccountApplication.java\n    \u2502       \u2502           \u251c\u2500\u2500 \ud83d\udcc4 AccountModel.java\n    \u2502       \u2502           \u251c\u2500\u2500 \ud83d\udcc4 AccountParser.java\n    \u2502       \u2502           \u251c\u2500\u2500 \ud83d\udcc4 AccountRepository.java\n    \u2502       \u2502           \u251c\u2500\u2500 \ud83d\udcc4 AccountResource.java\n    \u2502       \u2502           \u2514\u2500\u2500 \ud83d\udcc4 AccountService.java\n    \u2502       \u2514\u2500\u2500 \ud83d\udcc1 resources/\n    \u2502           \u251c\u2500\u2500 \ud83d\udcc4 application.yaml\n    \u2502           \u2514\u2500\u2500 \ud83d\udcc1 db/\n    \u2502               \u2514\u2500\u2500 \ud83d\udcc1 migration/\n    \u2502                   \u251c\u2500\u2500 \ud83d\udcc4 V2025.08.29.001__create_schema.sql\n    \u2502                   \u251c\u2500\u2500 \ud83d\udcc4 V2025.08.29.002__create_table_account.sql\n    \u2502                   \u2514\u2500\u2500 \ud83d\udcc4 V2025.09.02.001__create_index_email.sql\n    \u251c\u2500\u2500 \ud83d\udcc4 pom.xml\n    \u251c\u2500\u2500 \ud83d\udcc4 Dockerfile\n    \u2514\u2500\u2500 \ud83d\udcc4 Jenkinsfile\n</code></pre> Source pom.xmlDockerfileJenkinsfilek8s.yamlapplication.yamlAccount.javaAccountApplication.javaAccountModel.javaAccountParser.javaAccountRepository.javaAccountResource.javaAccountService.javaV2025.08.29.001__create_schema.sqlV2025.08.29.002__create_table_account.sqlV2025.09.02.001__create_index_email.sql <pre><code>&lt;?xml version=\"1.0\" encoding=\"UTF-8\"?&gt;\n&lt;project xmlns=\"http://maven.apache.org/POM/4.0.0\" xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\"\n    xsi:schemaLocation=\"http://maven.apache.org/POM/4.0.0 https://maven.apache.org/xsd/maven-4.0.0.xsd\"&gt;\n    &lt;modelVersion&gt;4.0.0&lt;/modelVersion&gt;\n    &lt;parent&gt;\n        &lt;groupId&gt;org.springframework.boot&lt;/groupId&gt;\n        &lt;artifactId&gt;spring-boot-starter-parent&lt;/artifactId&gt;\n        &lt;version&gt;3.5.5&lt;/version&gt;\n        &lt;relativePath/&gt;\n    &lt;/parent&gt;\n\n    &lt;groupId&gt;store&lt;/groupId&gt;\n    &lt;artifactId&gt;account-service&lt;/artifactId&gt;\n    &lt;version&gt;1.0.0&lt;/version&gt;\n\n    &lt;properties&gt;\n        &lt;java.version&gt;21&lt;/java.version&gt;\n        &lt;spring-cloud.version&gt;2025.0.0&lt;/spring-cloud.version&gt;\n        &lt;maven.compiler.proc&gt;full&lt;/maven.compiler.proc&gt;\n    &lt;/properties&gt;\n\n    &lt;dependencies&gt;\n        &lt;dependency&gt;\n            &lt;groupId&gt;org.springframework.boot&lt;/groupId&gt;\n            &lt;artifactId&gt;spring-boot-starter-web&lt;/artifactId&gt;\n        &lt;/dependency&gt;\n\n        &lt;dependency&gt;\n            &lt;groupId&gt;org.springframework.boot&lt;/groupId&gt;\n            &lt;artifactId&gt;spring-boot-starter-data-jpa&lt;/artifactId&gt;\n        &lt;/dependency&gt;\n\n        &lt;dependency&gt;\n            &lt;groupId&gt;${project.groupId}&lt;/groupId&gt;\n            &lt;artifactId&gt;account&lt;/artifactId&gt;\n            &lt;version&gt;${project.version}&lt;/version&gt;\n        &lt;/dependency&gt;\n\n        &lt;!-- https://mvnrepository.com/artifact/org.projectlombok/lombok --&gt;\n        &lt;dependency&gt;\n            &lt;groupId&gt;org.projectlombok&lt;/groupId&gt;\n            &lt;artifactId&gt;lombok&lt;/artifactId&gt;\n            &lt;optional&gt;true&lt;/optional&gt;\n        &lt;/dependency&gt;\n\n        &lt;dependency&gt;\n            &lt;groupId&gt;org.postgresql&lt;/groupId&gt;\n            &lt;artifactId&gt;postgresql&lt;/artifactId&gt;\n            &lt;scope&gt;runtime&lt;/scope&gt;\n        &lt;/dependency&gt;\n        &lt;dependency&gt;\n            &lt;groupId&gt;org.flywaydb&lt;/groupId&gt;\n            &lt;artifactId&gt;flyway-core&lt;/artifactId&gt;\n        &lt;/dependency&gt;\n        &lt;dependency&gt;\n            &lt;groupId&gt;org.flywaydb&lt;/groupId&gt;\n            &lt;artifactId&gt;flyway-database-postgresql&lt;/artifactId&gt;\n        &lt;/dependency&gt;\n\n\n    &lt;/dependencies&gt;\n\n    &lt;dependencyManagement&gt;\n        &lt;dependencies&gt;\n            &lt;dependency&gt;\n                &lt;groupId&gt;org.springframework.cloud&lt;/groupId&gt;\n                &lt;artifactId&gt;spring-cloud-dependencies&lt;/artifactId&gt;\n                &lt;version&gt;${spring-cloud.version}&lt;/version&gt;\n                &lt;type&gt;pom&lt;/type&gt;\n                &lt;scope&gt;import&lt;/scope&gt;\n            &lt;/dependency&gt;\n        &lt;/dependencies&gt;\n    &lt;/dependencyManagement&gt;\n\n    &lt;build&gt;\n        &lt;plugins&gt;\n            &lt;plugin&gt;\n                &lt;groupId&gt;org.springframework.boot&lt;/groupId&gt;\n                &lt;artifactId&gt;spring-boot-maven-plugin&lt;/artifactId&gt;\n                &lt;configuration&gt;\n                    &lt;excludes&gt;\n                        &lt;exclude&gt;\n                            &lt;groupId&gt;org.projectlombok&lt;/groupId&gt;\n                            &lt;artifactId&gt;lombok&lt;/artifactId&gt;\n                        &lt;/exclude&gt;\n                    &lt;/excludes&gt;\n                &lt;/configuration&gt;\n            &lt;/plugin&gt;\n        &lt;/plugins&gt;\n    &lt;/build&gt;\n\n&lt;/project&gt;\n</code></pre> <pre><code>FROM openjdk:23-slim\nVOLUME /tmp\nCOPY target/*.jar /app.jar\nENTRYPOINT [\"java\",\"-jar\",\"/app.jar\"]\n</code></pre> <pre><code>pipeline {\n    agent any\n    environment {\n        SERVICE = 'account'\n        NAME = \"jpqv/${env.SERVICE}\"\n    }\n    stages {\n        stage('Dependecies') {\n            steps {\n                build job: 'account', wait: true\n            }\n        }\n        stage('Build') { \n            steps {\n                sh 'mvn -B -DskipTests clean package'\n            }\n        }      \n        stage('Build &amp; Push Image') {\n            steps {\n                withCredentials([usernamePassword(\n                    credentialsId: 'dockerhub-credential',\n                    usernameVariable: 'USERNAME',\n                    passwordVariable: 'TOKEN')])\n                {\n                    sh \"docker login -u $USERNAME -p $TOKEN\"\n                    sh \"docker buildx create --use --platform=linux/arm64,linux/amd64 --node multi-platform-builder-${env.SERVICE} --name multi-platform-builder-${env.SERVICE}\"\n                    sh \"docker buildx build --platform=linux/arm64,linux/amd64 --push --tag ${env.NAME}:latest --tag ${env.NAME}:${env.BUILD_ID} -f DockerFile .\"\n                    sh \"docker buildx rm --force multi-platform-builder-${env.SERVICE}\"\n                }\n            }\n        }\n    }\n}\n</code></pre> <pre><code>apiVersion: apps/v1\nkind: Deployment\nmetadata:\n  name: account\nspec:\n  replicas: 1\n  selector:\n    matchLabels:\n      app: account\n  template:\n    metadata:\n      labels:\n        app: account\n    spec:\n      containers:\n        - name: account\n          image: jpqv/account:latest\n          imagePullPolicy: Always\n          ports:\n            - containerPort: 8080\n          env:\n            - name: POSTGRES_DB\n              valueFrom:\n                configMapKeyRef:\n                  name: postgres-configmap\n                  key: POSTGRES_DB\n            - name: DATABASE_USERNAME\n              valueFrom:\n                secretKeyRef:\n                  name: postgres-secrets\n                  key: POSTGRES_USER\n            - name: DATABASE_PASSWORD\n              valueFrom:\n                secretKeyRef:\n                  name: postgres-secrets\n                  key: POSTGRES_PASSWORD\n            - name: DATABASE_URL\n              value: \"jdbc:postgresql://postgres:5432/$(POSTGRES_DB)\"\n          resources:\n            requests:\n              memory: \"200Mi\"\n              cpu: \"50m\"\n            limits:\n              memory: \"300Mi\"\n              cpu: \"200m\"\n\n---\n\napiVersion: v1\nkind: Service\nmetadata:\n  name: account\n  labels:\n    app: account\nspec:\n  type: ClusterIP\n  ports:\n    - port: 80\n      protocol: TCP\n      targetPort: 8080\n\n  selector:\n    app: account\n</code></pre> <pre><code>server:\n  port: 8080\n\nspring:\n  application:\n    name: account\n\n  mvc:\n    problemdetails:\n      enabled: true\n\n  datasource:\n    url: ${DATABASE_URL}\n    username: ${DATABASE_USERNAME}\n    password: ${DATABASE_PASSWORD}\n    driver-class-name: org.postgresql.Driver\n\n  flyway:\n    baseline-on-migrate: true\n    schemas: account\n  jpa:\n    properties:\n      hibernate:\n        default_schema: account\n\nlogging:\n  level:\n    store: debug\n</code></pre> <pre><code>package store.account;\n\nimport lombok.Builder;\nimport lombok.Data;\nimport lombok.experimental.Accessors;\n\n@Builder @Data @Accessors(fluent = true, chain = true)\npublic class Account {\n\n    private String id;\n    private String name;\n    private String email;\n    private String password;\n    private String sha256;\n\n}\n</code></pre> <pre><code>package store.account;\n\nimport org.springframework.boot.SpringApplication;\nimport org.springframework.boot.autoconfigure.SpringBootApplication;\nimport org.springframework.cloud.openfeign.EnableFeignClients;\n\n@EnableFeignClients(basePackages = {\n})\n@SpringBootApplication\npublic class AccountApplication {\n\n    public static void main(String[] args) {\n        SpringApplication.run(AccountApplication.class, args);\n    }\n\n}\n</code></pre> <pre><code>package store.account;\n\nimport jakarta.persistence.Column;\nimport jakarta.persistence.Entity;\nimport jakarta.persistence.GeneratedValue;\nimport jakarta.persistence.GenerationType;\nimport jakarta.persistence.Id;\nimport jakarta.persistence.Table;\nimport lombok.AllArgsConstructor;\nimport lombok.NoArgsConstructor;\nimport lombok.Setter;\nimport lombok.experimental.Accessors;\n\n@Entity\n@Table(name = \"account\")\n@Setter @Accessors(chain = true, fluent = true)\n@NoArgsConstructor @AllArgsConstructor\npublic class AccountModel {\n\n    @Id\n    @Column(name = \"id\")\n    @GeneratedValue(strategy = GenerationType.UUID)\n    private String id;\n\n    @Column(name = \"name\")\n    private String name;\n\n    @Column(name = \"email\")\n    private String email;\n\n    @Column(name = \"sha256\")\n    private String sha256;\n\n    public AccountModel(Account a) {\n        this.id = a.id();\n        this.name = a.name();\n        this.email = a.email();\n        this.sha256 = a.sha256();\n    }\n\n    public Account to() {\n        return Account.builder()\n            .id(this.id)\n            .name(this.name)\n            .email(this.email)\n            .sha256(this.sha256)\n            .build();\n    }\n\n}\n</code></pre> <pre><code>package store.account;\n\nimport java.util.List;\n\npublic class AccountParser {\n\n    public static Account to(AccountIn in) {\n        return in == null ? null :\n            Account.builder()\n                .name(in.name())\n                .email(in.email())\n                .password(in.password())\n                .build();\n    }\n\n    public static AccountOut to(Account a) {\n        return a == null ? null :\n            AccountOut.builder()\n                .id(a.id())\n                .name(a.name())\n                .email(a.email())\n                .build();\n    }\n\n    public static List&lt;AccountOut&gt; to(List&lt;Account&gt; as) {\n        return as == null ? null :\n            as.stream().map(AccountParser::to).toList();\n    }\n\n}\n</code></pre> <pre><code>package store.account;\n\nimport java.util.Optional;\n\nimport org.springframework.data.repository.CrudRepository;\nimport org.springframework.stereotype.Repository;\n\n@Repository\npublic interface AccountRepository extends CrudRepository&lt;AccountModel, String&gt; {\n\n    AccountModel findByEmail(String email);\n    Optional&lt;AccountModel&gt; findByEmailAndSha256(String email, String sha256);\n\n}\n</code></pre> <pre><code>package store.account;\n\nimport java.util.List;\n\nimport org.springframework.beans.factory.annotation.Autowired;\nimport org.springframework.http.HttpStatus;\nimport org.springframework.http.ResponseEntity;\nimport org.springframework.web.bind.annotation.RestController;\nimport org.springframework.web.server.ResponseStatusException;\nimport org.springframework.web.servlet.support.ServletUriComponentsBuilder;\n\n@RestController\npublic class AccountResource implements AccountController {\n\n    @Autowired\n    private AccountService accountService;\n\n    @Override\n    public ResponseEntity&lt;AccountOut&gt; create(AccountIn in) {\n        // parser AccountIn to Account\n        Account account = AccountParser.to(in);\n\n        Account saved = accountService.create(account);\n\n        // parser Account to AccountOut and build to\n        // HATEAOS standard\n        return ResponseEntity\n            .created(\n                ServletUriComponentsBuilder.fromCurrentRequest()\n                    .path(\"/{id}\")\n                    .buildAndExpand(saved.id())\n                    .toUri()\n            ).body(AccountParser.to(saved));\n    }\n\n    @Override\n    public ResponseEntity&lt;AccountOut&gt; findById(String id) {\n        return ResponseEntity\n            .ok(AccountParser.to(accountService.findById(id)));\n    }\n\n    @Override\n    public ResponseEntity&lt;AccountOut&gt; findByEmailAndPassword(AccountIn in) {\n        return ResponseEntity\n            .ok()\n            .body(AccountParser.to(\n                accountService.findByEmailAndPassword(in.email(), in.password())\n            ));\n    }\n\n    @Override\n    public ResponseEntity&lt;List&lt;AccountOut&gt;&gt; findAll() {\n        return ResponseEntity\n            .ok()\n            .body(AccountParser.to(accountService.findAll()));\n    }\n\n    @Override\n    public ResponseEntity&lt;Void&gt; delete(String id) {\n        return ResponseEntity\n            .noContent()\n            .build();\n    }\n\n    @Override\n    public ResponseEntity&lt;AccountOut&gt; whoAmI(String idAccount) {\n        final Account found = accountService.findById(idAccount);\n        if (found == null) {\n            throw new ResponseStatusException(HttpStatus.NOT_FOUND);\n        }\n        return ResponseEntity.ok(AccountParser.to(found));\n    }\n\n}\n</code></pre> <pre><code>package store.account;\n\nimport java.nio.charset.StandardCharsets;\nimport java.security.MessageDigest;\nimport java.security.NoSuchAlgorithmException;\nimport java.util.Base64;\nimport java.util.List;\nimport java.util.stream.StreamSupport;\n\nimport org.slf4j.Logger;\nimport org.slf4j.LoggerFactory;\nimport org.springframework.beans.factory.annotation.Autowired;\nimport org.springframework.http.HttpStatus;\nimport org.springframework.stereotype.Service;\nimport org.springframework.web.server.ResponseStatusException;\n\n@Service\npublic class AccountService {\n\n    private Logger looger = LoggerFactory.getLogger(AccountService.class);\n\n    @Autowired\n    private AccountRepository accountRepository;\n\n    public Account create(Account account) {\n        if (null == account.password()) {\n            throw new ResponseStatusException(HttpStatus.BAD_REQUEST,\n                \"Password is mandatory!\"\n            );\n        }\n        // clean special caracters\n        account.password(account.password().trim());\n        if (account.password().length() &lt; 4) {\n            throw new ResponseStatusException(HttpStatus.BAD_REQUEST,\n                \"Password is too short!\"\n            );\n        }\n        if (null == account.email()) {\n            throw new ResponseStatusException(HttpStatus.BAD_REQUEST,\n                \"Email is mandatory!\"\n            );\n        }\n\n        if (accountRepository.findByEmail(account.email()) != null)\n            throw new ResponseStatusException(HttpStatus.BAD_REQUEST,\n                \"Email already have been registered!\"\n            );\n\n        account.sha256(hash(account.password()));\n\n        return accountRepository.save(\n            new AccountModel(account)\n        ).to();\n    }\n\n    public List&lt;Account&gt; findAll() {\n        return StreamSupport.stream(\n            accountRepository.findAll().spliterator(), false)\n            .map(AccountModel::to)\n            .toList();\n    }\n\n    public Account findById(String id) {\n        return accountRepository.findById(id).map(AccountModel::to).orElse(null);\n    }\n\n    public Account findByEmailAndPassword(String email, String password) {\n        String sha256 = hash(password);\n        return accountRepository.findByEmailAndSha256(email, sha256).map(AccountModel::to).orElse(null);\n    }\n\n    public void delete(String id) {\n        accountRepository.delete(new AccountModel().id(id));\n    }\n\n    private String hash(String pass) {\n        try {\n            MessageDigest digest = MessageDigest.getInstance(\"SHA-256\");\n            byte[] encodedHash = digest.digest(\n                pass.getBytes(StandardCharsets.UTF_8)\n            );\n            return Base64.getEncoder().encodeToString(encodedHash);\n        } catch (NoSuchAlgorithmException e) {\n            throw new ResponseStatusException(HttpStatus.INTERNAL_SERVER_ERROR, e.getMessage(), e);\n        }\n    }\n\n}\n</code></pre> <pre><code>CREATE SCHEMA IF NOT EXISTS account;\n</code></pre> <pre><code>CREATE TABLE account\n(\n    id varchar(36) NOT NULL,\n    name varchar(255) NOT NULL,\n    email varchar(255) NOT NULL,\n    sha256 varchar(64) NOT NULL,\n    CONSTRAINT account_pkey PRIMARY KEY (id)\n)\n</code></pre> <pre><code>CREATE INDEX account_email_idx ON account (email);\n</code></pre> mvn clean package spring-boot:run"},{"location":"authapi/main/","title":"2. Auth API","text":""},{"location":"authapi/main/#auth-api","title":"Auth API","text":"<p>A Auth API \u00e9 respons\u00e1vel pela autentica\u00e7\u00e3o de usu\u00e1rios e gera\u00e7\u00e3o de tokens JWT utilizados por todos os demais microservi\u00e7os do dom\u00ednio <code>store</code>. Ela valida credenciais, emite tokens de acesso e garante a integridade das comunica\u00e7\u00f5es dentro da arquitetura de microsservi\u00e7os.</p> <p>Trusted layer e seguran\u00e7a</p> <p>O acesso \u00e0 Auth API \u00e9 realizado via Gateway. Ap\u00f3s o login, o JWT \u00e9 retornado ao cliente e utilizado nas demais requisi\u00e7\u00f5es aos servi\u00e7os protegidos (<code>account</code>, <code>order</code>, <code>product</code>, <code>exchange</code>).</p>"},{"location":"authapi/main/#visao-geral","title":"Vis\u00e3o geral","text":"<ul> <li> <p>Service (<code>auth-service</code>): Implementado em Spring Boot (Java).   Exp\u00f5e endpoints p\u00fablicos para autentica\u00e7\u00e3o e registro de usu\u00e1rios.   Integra-se com o <code>account-service</code> para valida\u00e7\u00e3o de usu\u00e1rios e gera tokens JWT assinados com a chave definida em <code>JWT_SECRET_KEY</code>.</p> </li> <li> <p>Fluxo de autentica\u00e7\u00e3o </p> </li> <li>O cliente envia <code>email</code> e <code>password</code> para <code>/auth/login</code>.  </li> <li>O Auth API valida as credenciais no <code>account-service</code>.  </li> <li>Em caso de sucesso, \u00e9 gerado e retornado o <code>token JWT</code>.  </li> <li>O <code>gateway-service</code> utiliza esse token para validar requisi\u00e7\u00f5es futuras e injetar o <code>id-account</code> nos headers.</li> </ul> <pre><code>classDiagram\n    namespace auth {\n        class AuthController {\n            +register(RegisterIn RegisterIn): TokenOut\n            +login(LoginIn loginIn): TokenOut\n        }\n        class RegisterIn {\n            -String name\n            -String email\n            -String password\n        }\n        class LoginIn {\n            -String name\n            -String email\n        }\n        class TokenOut {\n            -String token\n        }\n        class SolveOut {\n            -String idAccount\n        }\n    }\n    namespace auth-service {\n        class AuthResource {\n            +register(RegisterIn RegisterIn) TokenOut\n            +login(LoginIn loginIn) TokenOut\n        }\n        class AuthService {\n            +register(Register) Regiter\n            +login(LoginIn loginIn) String\n        }\n        class Register {\n            -String id\n            -String name\n            -String email\n            -String password\n        }\n    }\n    &lt;&lt;Interface&gt;&gt; AuthController\n    AuthController ..&gt; RegisterIn\n    AuthController ..&gt; LoginIn\n    AuthController ..&gt; TokenOut\n\n    AuthController &lt;|-- AuthResource\n    AuthResource *-- AuthService\n    AuthService ..&gt; Register</code></pre>"},{"location":"authapi/main/#estrutura-da-requisicao","title":"Estrutura da requisi\u00e7\u00e3o","text":"<pre><code>flowchart LR\n    subgraph api [Trusted Layer]\n        direction TB\n        gateway --&gt; account\n        gateway --&gt; others\n        gateway e4@==&gt; auth:::red\n        auth e2@==&gt; account\n        account --&gt; db@{ shape: cyl, label: \"Database\" }\n        others --&gt; db\n    end\n    internet e1@==&gt;|request| gateway:::orange\n    e1@{ animate: true }\n    e2@{ animate: true }\n    e4@{ animate: true }\n    classDef red fill:#fcc\n    classDef orange fill:#FCBE3E</code></pre>"},{"location":"authapi/main/#auth","title":"Auth","text":"<pre><code>\ud83d\udcc1 api/\n\u2514\u2500\u2500 \ud83d\udcc1 auth/\n    \u251c\u2500\u2500 \ud83d\udcc1 src/\n    \u2502   \u2514\u2500\u2500 \ud83d\udcc1 main/\n    \u2502       \u2514\u2500\u2500 \ud83d\udcc1 java/\n    \u2502           \u2514\u2500\u2500 \ud83d\udcc1 store/\n    \u2502               \u2514\u2500\u2500 \ud83d\udcc1 auth/\n    \u2502                   \u251c\u2500\u2500 \ud83d\udcc4 AuthController.java\n    \u2502                   \u251c\u2500\u2500 \ud83d\udcc4 LoginIn.java\n    \u2502                   \u251c\u2500\u2500 \ud83d\udcc4 RegisterIn.java\n    \u2502                   \u2514\u2500\u2500 \ud83d\udcc4 TokenOut.java\n    \u251c\u2500\u2500 \ud83d\udcc4 pom.xml\n    \u2514\u2500\u2500 \ud83d\udcc4 Jenkinsfile\n</code></pre> Source pom.xmlJenkinsfileAuthController.javaLoginIn.javaRegisterIn.javaTokenOut.java <pre><code>&lt;?xml version=\"1.0\" encoding=\"UTF-8\"?&gt;\n&lt;project xmlns=\"http://maven.apache.org/POM/4.0.0\" xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\"\n    xsi:schemaLocation=\"http://maven.apache.org/POM/4.0.0 https://maven.apache.org/xsd/maven-4.0.0.xsd\"&gt;\n    &lt;modelVersion&gt;4.0.0&lt;/modelVersion&gt;\n    &lt;parent&gt;\n        &lt;groupId&gt;org.springframework.boot&lt;/groupId&gt;\n        &lt;artifactId&gt;spring-boot-starter-parent&lt;/artifactId&gt;\n        &lt;version&gt;3.5.5&lt;/version&gt;\n        &lt;relativePath/&gt;\n    &lt;/parent&gt;\n\n    &lt;groupId&gt;store&lt;/groupId&gt;\n    &lt;artifactId&gt;auth&lt;/artifactId&gt;\n    &lt;version&gt;1.0.0&lt;/version&gt;\n\n    &lt;properties&gt;\n        &lt;java.version&gt;21&lt;/java.version&gt;\n        &lt;spring-cloud.version&gt;2025.0.0&lt;/spring-cloud.version&gt;\n        &lt;maven.compiler.proc&gt;full&lt;/maven.compiler.proc&gt;\n    &lt;/properties&gt;\n\n    &lt;dependencies&gt;\n        &lt;dependency&gt;\n            &lt;groupId&gt;org.springframework.boot&lt;/groupId&gt;\n            &lt;artifactId&gt;spring-boot-starter-web&lt;/artifactId&gt;\n        &lt;/dependency&gt;\n        &lt;dependency&gt;\n            &lt;groupId&gt;org.springframework.cloud&lt;/groupId&gt;\n            &lt;artifactId&gt;spring-cloud-starter-openfeign&lt;/artifactId&gt;\n        &lt;/dependency&gt;\n\n        &lt;dependency&gt;\n            &lt;groupId&gt;org.projectlombok&lt;/groupId&gt;\n            &lt;artifactId&gt;lombok&lt;/artifactId&gt;\n            &lt;optional&gt;true&lt;/optional&gt;\n        &lt;/dependency&gt;\n    &lt;/dependencies&gt;\n\n    &lt;dependencyManagement&gt;\n        &lt;dependencies&gt;\n            &lt;dependency&gt;\n                &lt;groupId&gt;org.springframework.cloud&lt;/groupId&gt;\n                &lt;artifactId&gt;spring-cloud-dependencies&lt;/artifactId&gt;\n                &lt;version&gt;${spring-cloud.version}&lt;/version&gt;\n                &lt;type&gt;pom&lt;/type&gt;\n                &lt;scope&gt;import&lt;/scope&gt;\n            &lt;/dependency&gt;\n        &lt;/dependencies&gt;\n    &lt;/dependencyManagement&gt;\n\n&lt;/project&gt;\n</code></pre> <pre><code>pipeline {\n    agent any\n\n    stages {\n        stage('Build') {\n            steps {\n                sh 'mvn -B -DskipTests clean install'\n            }\n        }\n    }\n\n}\n</code></pre> <pre><code>package store.auth;\n\nimport java.util.Map;\n\nimport org.springframework.cloud.openfeign.FeignClient;\nimport org.springframework.http.ResponseEntity;\nimport org.springframework.web.bind.annotation.PostMapping;\nimport org.springframework.web.bind.annotation.RequestBody;\n\n@FeignClient(name = \"auth\", url = \"http://auth:8080\")\npublic interface AuthController {\n\n    @PostMapping(\"/auth/register\")\n    public ResponseEntity&lt;TokenOut&gt; register(\n        @RequestBody RegisterIn in\n    );\n\n    @PostMapping(\"/auth/login\")\n    public ResponseEntity&lt;TokenOut&gt; login(\n        @RequestBody LoginIn in\n    );\n\n    @PostMapping(\"/auth/solve\")\n    public ResponseEntity&lt;Map&lt;String, String&gt;&gt; solve(\n        @RequestBody TokenOut in\n    );\n\n}\n</code></pre> <pre><code>package store.auth;\n\nimport lombok.Builder;\n\n@Builder\npublic record LoginIn(\n    String email,\n    String password\n) {\n\n}\n</code></pre> <pre><code>package store.auth;\n\nimport lombok.Builder;\n\n@Builder\npublic record RegisterIn(\n    String name,\n    String email,\n    String password\n) {\n\n}\n</code></pre> <pre><code>package store.auth;\n\nimport lombok.Builder;\n\n@Builder\npublic record TokenOut (\n    String jwt\n) {\n\n}\n</code></pre> mvn clean install"},{"location":"authapi/main/#auth-service","title":"Auth-Service","text":"<pre><code>\ud83d\udcc1 api/\n\u2514\u2500\u2500 \ud83d\udcc1 auth-service/\n    \u251c\u2500\u2500 \ud83d\udcc1 k8s/\n    \u2502   \u2514\u2500\u2500 \ud83d\udcc4 k8s.yaml\n    \u251c\u2500\u2500 \ud83d\udcc1 src/\n    \u2502   \u251c\u2500\u2500 \ud83d\udcc1 main/\n    \u2502   \u2502   \u2514\u2500\u2500 \ud83d\udcc1 java/\n    \u2502   \u2502       \u2514\u2500\u2500 \ud83d\udcc1 store/\n    \u2502   \u2502           \u2514\u2500\u2500 \ud83d\udcc1 auth/\n    \u2502   \u2502               \u251c\u2500\u2500 \ud83d\udcc4 AuthApplication.java\n    \u2502   \u2502               \u251c\u2500\u2500 \ud83d\udcc4 AuthResource.java\n    \u2502   \u2502               \u251c\u2500\u2500 \ud83d\udcc4 AuthService.java\n    \u2502   \u2502               \u2514\u2500\u2500 \ud83d\udcc4 JwtService.java\n    \u2502   \u2514\u2500\u2500 \ud83d\udcc1 resources/\n    \u2502       \u2514\u2500\u2500 \ud83d\udcc4 application.yaml\n    \u251c\u2500\u2500 \ud83d\udcc4 pom.xml\n    \u251c\u2500\u2500 \ud83d\udcc4 Dockerfile\n    \u2514\u2500\u2500 \ud83d\udcc4 Jenkinsfile\n</code></pre> Source pom.xmlDockerfileJenkinsfilek8s.yamlapplication.yamlAuthApplication.javaAuthResource.javaAuthService.javaJwtService.java <pre><code>&lt;?xml version=\"1.0\" encoding=\"UTF-8\"?&gt;\n&lt;project xmlns=\"http://maven.apache.org/POM/4.0.0\" xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\"\n    xsi:schemaLocation=\"http://maven.apache.org/POM/4.0.0 https://maven.apache.org/xsd/maven-4.0.0.xsd\"&gt;\n    &lt;modelVersion&gt;4.0.0&lt;/modelVersion&gt;\n    &lt;parent&gt;\n        &lt;groupId&gt;org.springframework.boot&lt;/groupId&gt;\n        &lt;artifactId&gt;spring-boot-starter-parent&lt;/artifactId&gt;\n        &lt;version&gt;3.5.5&lt;/version&gt;\n        &lt;relativePath/&gt;\n    &lt;/parent&gt;\n\n    &lt;groupId&gt;store&lt;/groupId&gt;\n    &lt;artifactId&gt;auth-service&lt;/artifactId&gt;\n    &lt;version&gt;1.0.0&lt;/version&gt;\n\n    &lt;properties&gt;\n        &lt;java.version&gt;21&lt;/java.version&gt;\n        &lt;spring-cloud.version&gt;2025.0.0&lt;/spring-cloud.version&gt;\n        &lt;maven.compiler.proc&gt;full&lt;/maven.compiler.proc&gt;\n    &lt;/properties&gt;\n\n    &lt;dependencies&gt;\n        &lt;dependency&gt;\n            &lt;groupId&gt;org.springframework.boot&lt;/groupId&gt;\n            &lt;artifactId&gt;spring-boot-starter-web&lt;/artifactId&gt;\n        &lt;/dependency&gt;\n        &lt;dependency&gt;\n            &lt;groupId&gt;org.springframework.cloud&lt;/groupId&gt;\n            &lt;artifactId&gt;spring-cloud-starter-openfeign&lt;/artifactId&gt;\n        &lt;/dependency&gt;\n\n        &lt;dependency&gt;\n            &lt;groupId&gt;${project.groupId}&lt;/groupId&gt;\n            &lt;artifactId&gt;auth&lt;/artifactId&gt;\n            &lt;version&gt;${project.version}&lt;/version&gt;\n        &lt;/dependency&gt;\n        &lt;dependency&gt;\n            &lt;groupId&gt;${project.groupId}&lt;/groupId&gt;\n            &lt;artifactId&gt;account&lt;/artifactId&gt;\n            &lt;version&gt;${project.version}&lt;/version&gt;\n        &lt;/dependency&gt;\n\n        &lt;!-- https://mvnrepository.com/artifact/org.projectlombok/lombok --&gt;\n        &lt;dependency&gt;\n            &lt;groupId&gt;org.projectlombok&lt;/groupId&gt;\n            &lt;artifactId&gt;lombok&lt;/artifactId&gt;\n            &lt;optional&gt;true&lt;/optional&gt;\n        &lt;/dependency&gt;\n\n        &lt;!-- https://mvnrepository.com/artifact/io.jsonwebtoken/jjwt-api --&gt;\n        &lt;dependency&gt;\n            &lt;groupId&gt;io.jsonwebtoken&lt;/groupId&gt;\n            &lt;artifactId&gt;jjwt-api&lt;/artifactId&gt;\n            &lt;version&gt;[0.13,)&lt;/version&gt;\n        &lt;/dependency&gt;\n        &lt;dependency&gt;\n            &lt;groupId&gt;io.jsonwebtoken&lt;/groupId&gt;\n            &lt;artifactId&gt;jjwt-impl&lt;/artifactId&gt;\n            &lt;version&gt;[0.13,)&lt;/version&gt;\n            &lt;scope&gt;runtime&lt;/scope&gt;\n        &lt;/dependency&gt;\n        &lt;dependency&gt;\n            &lt;groupId&gt;io.jsonwebtoken&lt;/groupId&gt;\n            &lt;artifactId&gt;jjwt-jackson&lt;/artifactId&gt; &lt;!-- or jjwt-gson if Gson is preferred --&gt;\n            &lt;version&gt;[0.13,)&lt;/version&gt;\n            &lt;scope&gt;runtime&lt;/scope&gt;\n        &lt;/dependency&gt;\n\n    &lt;/dependencies&gt;\n\n    &lt;dependencyManagement&gt;\n        &lt;dependencies&gt;\n            &lt;dependency&gt;\n                &lt;groupId&gt;org.springframework.cloud&lt;/groupId&gt;\n                &lt;artifactId&gt;spring-cloud-dependencies&lt;/artifactId&gt;\n                &lt;version&gt;${spring-cloud.version}&lt;/version&gt;\n                &lt;type&gt;pom&lt;/type&gt;\n                &lt;scope&gt;import&lt;/scope&gt;\n            &lt;/dependency&gt;\n        &lt;/dependencies&gt;\n    &lt;/dependencyManagement&gt;\n\n    &lt;build&gt;\n        &lt;plugins&gt;\n            &lt;plugin&gt;\n                &lt;groupId&gt;org.springframework.boot&lt;/groupId&gt;\n                &lt;artifactId&gt;spring-boot-maven-plugin&lt;/artifactId&gt;\n                &lt;configuration&gt;\n                    &lt;excludes&gt;\n                        &lt;exclude&gt;\n                            &lt;groupId&gt;org.projectlombok&lt;/groupId&gt;\n                            &lt;artifactId&gt;lombok&lt;/artifactId&gt;\n                        &lt;/exclude&gt;\n                    &lt;/excludes&gt;\n                &lt;/configuration&gt;\n            &lt;/plugin&gt;\n        &lt;/plugins&gt;\n    &lt;/build&gt;\n\n&lt;/project&gt;\n</code></pre> <pre><code>FROM openjdk:23-slim\nVOLUME /tmp\nCOPY target/*.jar /app.jar\nENTRYPOINT [\"java\",\"-jar\",\"/app.jar\"]\n</code></pre> <pre><code>pipeline {\n    agent any\n    environment {\n        SERVICE = 'auth'\n        NAME = \"jpqv/${env.SERVICE}\"\n    }\n    stages {\n        stage('Dependecies') {\n            steps {\n                build job: 'auth', wait: true\n            }\n        }\n        stage('Build') { \n            steps {\n                sh 'mvn -B -DskipTests clean package'\n            }\n        }      \n        stage('Build &amp; Push Image') {\n            steps {\n                withCredentials([usernamePassword(\n                    credentialsId: 'dockerhub-credential',\n                    usernameVariable: 'USERNAME',\n                    passwordVariable: 'TOKEN')])\n                {\n                    sh \"docker login -u $USERNAME -p $TOKEN\"\n                    sh \"docker buildx create --use --platform=linux/arm64,linux/amd64 --node multi-platform-builder-${env.SERVICE} --name multi-platform-builder-${env.SERVICE}\"\n                    sh \"docker buildx build --platform=linux/arm64,linux/amd64 --push --tag ${env.NAME}:latest --tag ${env.NAME}:${env.BUILD_ID} -f DockerFile .\"\n                    sh \"docker buildx rm --force multi-platform-builder-${env.SERVICE}\"\n                }\n            }\n        }\n    }\n}\n</code></pre> <pre><code>apiVersion: apps/v1\nkind: Deployment\nmetadata:\n  name: auth\nspec:\n  replicas: 1\n  selector:\n    matchLabels:\n      app: auth\n  template:\n    metadata:\n      labels:\n        app: auth\n    spec:\n      containers:\n        - name: auth\n          image: jpqv/auth:latest\n          imagePullPolicy: Always\n          ports:\n            - containerPort: 8080\n          env:\n            - name: POSTGRES_DB\n              valueFrom:\n                configMapKeyRef:\n                  name: postgres-configmap\n                  key: POSTGRES_DB\n            - name: DATABASE_USERNAME\n              valueFrom:\n                secretKeyRef:\n                  name: postgres-secrets\n                  key: POSTGRES_USER\n            - name: DATABASE_PASSWORD\n              valueFrom:\n                secretKeyRef:\n                  name: postgres-secrets\n                  key: POSTGRES_PASSWORD\n            - name: DATABASE_URL\n              value: \"jdbc:postgresql://postgres:5432/$(POSTGRES_DB)\"\n          resources:\n            requests:\n              memory: \"200Mi\"\n              cpu: \"50m\"\n            limits:\n              memory: \"300Mi\"\n              cpu: \"200m\"\n\n---\n\napiVersion: v1\nkind: Service\nmetadata:\n  name: auth\n  labels:\n    app: auth\nspec:\n  type: ClusterIP\n  ports:\n    - port: 80\n      protocol: TCP\n      targetPort: 8080\n\n  selector:\n    app: auth\n</code></pre> <pre><code>server:\n  port: 8080\n\nspring:\n  application:\n    name: auth\n\n  mvc:\n    problemdetails:\n      enabled: true\n\nstore:\n  jwt:\n    secretKey: ${JWT_SECRET_KEY:changeit}\n\nlogging:\n  level:\n    root: info\n    store: debug\n</code></pre> <pre><code>package store.auth;\n\nimport org.springframework.boot.SpringApplication;\nimport org.springframework.boot.autoconfigure.SpringBootApplication;\nimport org.springframework.cloud.openfeign.EnableFeignClients;\n\n@EnableFeignClients(basePackages = {\n    \"store.account\"\n})\n@SpringBootApplication\npublic class AuthApplication {\n\n    public static void main(String[] args) {\n        SpringApplication.run(AuthApplication.class, args);\n    }\n\n}\n</code></pre> <pre><code>package store.auth;\n\nimport java.util.Map;\n\nimport org.springframework.beans.factory.annotation.Autowired;\nimport org.springframework.http.ResponseEntity;\nimport org.springframework.web.bind.annotation.RestController;\nimport org.springframework.web.servlet.support.ServletUriComponentsBuilder;\n\nimport store.account.AccountOut;\n\n@RestController\npublic class AuthResource implements AuthController {\n\n    @Autowired\n    private AuthService authService;\n\n    @Override\n    public ResponseEntity&lt;TokenOut&gt; register(RegisterIn in) {\n        final String jwt = authService.register(\n            in.name(), in.email(), in.password()\n        );\n        return ResponseEntity\n            .created(\n                ServletUriComponentsBuilder.fromCurrentRequest().build().toUri()\n            )\n            .body(TokenOut.builder().jwt(jwt).build());\n    }\n\n    @Override\n    public ResponseEntity&lt;TokenOut&gt; login(LoginIn in) {\n        final String jwt = authService.login(\n            in.email(),\n            in.password()\n        );\n        return ResponseEntity\n            .created(\n                ServletUriComponentsBuilder.fromCurrentRequest().build().toUri()\n            )\n            .body(TokenOut.builder().jwt(jwt).build());\n    }\n\n    @Override\n    public ResponseEntity&lt;Map&lt;String, String&gt;&gt; solve(TokenOut in) {\n        AccountOut account = authService.solve(in.jwt());\n        return ResponseEntity.ok(\n            Map.of(\n                \"idAccount\", account.id()\n            )\n        );\n    }\n\n}\n</code></pre> <pre><code>package store.auth;\n\nimport org.slf4j.Logger;\nimport org.slf4j.LoggerFactory;\nimport org.springframework.beans.factory.annotation.Autowired;\nimport org.springframework.http.HttpStatus;\nimport org.springframework.http.ResponseEntity;\nimport org.springframework.stereotype.Service;\nimport org.springframework.web.server.ResponseStatusException;\n\nimport store.account.AccountController;\nimport store.account.AccountIn;\nimport store.account.AccountOut;\n\n@Service\npublic class AuthService {\n\n    private Logger logger = LoggerFactory.getLogger(AuthService.class);\n\n    @Autowired\n    private AccountController accountController;\n\n    @Autowired\n    private JwtService jwtService;\n\n    public String register(String name, String email, String password) {\n\n        logger.debug(\n            String.format(\n                \"registrando uma conta: [%s] for [%s]\",\n                name, email\n            )\n        );\n\n        // Salvar no servico de Account\n        AccountOut account = accountController.create(AccountIn.builder()\n            .name(name)\n            .email(email)\n            .password(password)\n            .build()\n        ).getBody();\n\n        // Gera um token\n        String jwtString = jwtService.generate(account);\n\n        // Retorna o token\n        return jwtString;\n    }\n\n    public String login(String email, String password) {\n\n        logger.debug(String.format(\"required login for %s:%s\", email, password));\n\n        // Verify credentials\n        ResponseEntity&lt;AccountOut&gt; response = accountController.findByEmailAndPassword(\n            AccountIn.builder()\n                .email(email)\n                .password(password)\n                .build()\n        );\n        if (!response.hasBody()) {\n            logger.debug(String.format(\"user not found\"));\n            throw new ResponseStatusException(HttpStatus.UNAUTHORIZED);\n        }\n\n        AccountOut account = response.getBody();\n        logger.debug(String.format(\"found user\", account));\n\n        // generate token\n        return jwtService.generate(account);\n    }\n\n    public AccountOut solve(String jwt) {\n        return AccountOut.builder()\n            .id(jwtService.getId(jwt))\n            .build();\n    }\n\n}\n</code></pre> <pre><code>package store.auth;\n\nimport java.util.Date;\nimport java.util.Map;\n\nimport javax.crypto.SecretKey;\n\nimport org.springframework.beans.factory.annotation.Value;\nimport org.springframework.http.HttpStatus;\nimport org.springframework.stereotype.Service;\nimport org.springframework.web.server.ResponseStatusException;\n\nimport io.jsonwebtoken.Claims;\nimport io.jsonwebtoken.JwtParser;\nimport io.jsonwebtoken.Jwts;\nimport io.jsonwebtoken.io.Decoders;\nimport io.jsonwebtoken.security.Keys;\nimport store.account.AccountOut;\n\n@Service\npublic class JwtService {\n\n    @Value(\"${store.jwt.secretKey}\")\n    private String secretKey;\n\n    public String generate(AccountOut account) {\n\n        Date now = new Date();\n\n        String jwt = Jwts.builder()\n            .header()\n            .and()\n            .id(account.id())\n            .issuer(\"Insper::PMA\")\n            .claims(Map.of(\n                \"email\", account.email()\n            ))\n            .signWith(getKey())\n            .subject(account.name())\n            .notBefore(now)\n            .expiration(new Date(now.getTime() + 1000 * 60 * 120)) // em milisegundos\n            .compact();\n        return jwt;\n\n    }\n\n    public String getId(String jwt) {\n        // constroe o parser\n        JwtParser parser = Jwts.parser().verifyWith(getKey()).build();\n        // recupero os atributos\n        Claims claims = parser.parseSignedClaims(jwt).getPayload();\n        Date now = new Date();\n        if (claims.getNotBefore().after(now)) {\n            throw new ResponseStatusException(\n                HttpStatus.UNAUTHORIZED,\n                \"Token is not valid yet!\"\n            );\n        }\n        if (claims.getExpiration().before(now)) {\n            throw new ResponseStatusException(\n                HttpStatus.UNAUTHORIZED,\n                \"Token is expired!\"\n            );\n        }\n        return claims.getId();\n    }\n\n    private SecretKey getKey() {\n        return Keys.hmacShaKeyFor(Decoders.BASE64.decode(secretKey));\n    }\n\n}\n</code></pre> mvn clean package spring-boot:run"},{"location":"bottlenecks/main/","title":"9. Bottlenecks","text":""},{"location":"bottlenecks/main/#bottlenecks-escalabilidade-e-desempenho","title":"Bottlenecks \u2013 Escalabilidade e Desempenho","text":"<p>Este documento consolida as estrat\u00e9gias de balanceamento de carga e cache distribu\u00eddo utilizadas no ecossistema <code>store-api</code>, respons\u00e1veis por mitigar gargalos de desempenho e garantir resili\u00eancia e alta disponibilidade no ambiente Kubernetes da AWS (EKS).</p>"},{"location":"bottlenecks/main/#1-load-balancer-aws-eks","title":"1. Load Balancer (AWS EKS)","text":"<p>O Gateway Service atua como ponto de entrada \u00fanico para todas as requisi\u00e7\u00f5es externas ao cluster. Ele \u00e9 configurado com um Service Kubernetes do tipo <code>LoadBalancer</code>, que instrui o EKS (Elastic Kubernetes Service) a criar automaticamente um Elastic Load Balancer (ELB) na AWS.</p>"},{"location":"bottlenecks/main/#fluxo-de-trafego","title":"\ud83d\udd39 Fluxo de tr\u00e1fego","text":"<pre><code>flowchart LR\n  user((\"Usuario\")) --&gt;|HTTP/HTTPS| aws[\"ELB / AWS LoadBalancer\"]\n  aws --&gt; gw[\"Gateway Service\"]\n  gw --&gt; acc[\"Account\"]\n  gw --&gt; aut[\"Auth\"]\n  gw --&gt; ord[\"Order\"]\n  gw --&gt; prod[\"Product\"]\n  gw --&gt; exch[\"Exchange\"]</code></pre>"},{"location":"bottlenecks/main/#configuracao-do-gateway","title":"\ud83d\udd39 Configura\u00e7\u00e3o do Gateway","text":"<p>Para detalhes completos sobre o deployment e o service do gateway, consulte a documenta\u00e7\u00e3o do Gateway API.</p>"},{"location":"bottlenecks/main/#2-cache-distribuido-redis","title":"2. Cache Distribu\u00eddo (Redis)","text":"<p>O Product Service utiliza o Redis como camada de cache distribu\u00eddo, reduzindo a lat\u00eancia e o n\u00famero de leituras diretas no banco PostgreSQL. O cache \u00e9 implementado por meio da abstra\u00e7\u00e3o de cache do Spring Boot, com gerenciamento centralizado pelo <code>RedisCacheManager</code>.</p>"},{"location":"bottlenecks/main/#21-arquitetura-do-cache","title":"2.1 Arquitetura do cache","text":"<pre><code>graph LR\n    client[Client / Gateway] --&gt; product[Product Service]\n    product --&gt; redis[(Redis Cache)]\n    product --&gt; db[(PostgreSQL)]\n\n    redis -- HIT --&gt; product\n    redis -- MISS --&gt; db\n    db --&gt; redis</code></pre>"},{"location":"bottlenecks/main/#22-funcionamento","title":"2.2 Funcionamento","text":"Tipo de Opera\u00e7\u00e3o Estrat\u00e9gia de Cache TTL <code>findAll()</code> Cache da lista completa (<code>products-list</code>) 2 minutos <code>findById(id)</code> Cache individual (<code>product-by-id</code>) 10 minutos <code>create()</code> / <code>delete()</code> Evict autom\u00e1tico das chaves afetadas \u2014 <p>Para a implementa\u00e7\u00e3o detalhada do c\u00f3digo-fonte e das anota\u00e7\u00f5es <code>@Cacheable</code> / <code>@CacheEvict</code>, consulte o Product API.</p>"},{"location":"bottlenecks/main/#3-redis-no-kubernetes","title":"3. Redis no Kubernetes","text":"<p>O Redis roda em um Deployment dedicado, com exposi\u00e7\u00e3o interna via Service ClusterIP para consumo pelos microservi\u00e7os do cluster.</p>"},{"location":"bottlenecks/main/#redisk8syaml","title":"\ud83d\udd39 <code>redis/k8s.yaml</code>","text":"<pre><code>apiVersion: apps/v1\nkind: Deployment\nmetadata:\n  name: redis\nspec:\n  replicas: 1\n  selector:\n    matchLabels:\n      app: redis\n  template:\n    metadata:\n      labels:\n        app: redis\n    spec:\n      containers:\n        - name: redis\n          image: redis:latest\n          ports:\n            - containerPort: 6379\n          resources:\n            requests:\n              memory: \"64Mi\"\n              cpu: \"50m\"\n            limits:\n              memory: \"128Mi\"\n              cpu: \"100m\"\n---\napiVersion: v1\nkind: Service\nmetadata:\n  name: redis\nspec:\n  type: ClusterIP\n  ports:\n    - port: 6379\n      targetPort: 6379\n  selector:\n    app: redis\n</code></pre> <p>O Service <code>redis</code> \u00e9 resolvido via DNS interno (<code>redis.store.svc.cluster.local</code>) e acessado pelos servi\u00e7os via <code>spring.data.redis.host=redis</code>.</p>"},{"location":"bottlenecks/main/#4-integracao-com-o-product-service","title":"4. Integra\u00e7\u00e3o com o Product-Service","text":"<p>O Product Service define as vari\u00e1veis de ambiente necess\u00e1rias para conectar-se ao Redis. O trecho abaixo mostra apenas as vari\u00e1veis relevantes \u2014 o deployment completo pode ser visto na documenta\u00e7\u00e3o do Product API.</p> <pre><code>env:\n  - name: SPRING_CACHE_TYPE\n    value: redis\n  - name: SPRING_DATA_REDIS_HOST\n    value: redis\n  - name: SPRING_DATA_REDIS_PORT\n    value: \"6379\"\n</code></pre>"},{"location":"bottlenecks/main/#5-beneficios-combinados","title":"5. Benef\u00edcios Combinados","text":"Estrat\u00e9gia Componente Resultado Load Balancer (ELB) Gateway Service Alta disponibilidade e distribui\u00e7\u00e3o autom\u00e1tica de tr\u00e1fego Redis Cache Product Service Redu\u00e7\u00e3o dr\u00e1stica de lat\u00eancia em <code>GET /product</code> e menor carga no PostgreSQL ClusterIP Services Todos os microservi\u00e7os internos Comunica\u00e7\u00e3o eficiente e segura dentro do cluster K8s Horizontal Scaling Gateway e servi\u00e7os stateless Escalabilidade horizontal conforme demanda"},{"location":"bottlenecks/main/#6-diagrama-consolidado","title":"6. Diagrama Consolidado","text":"<pre><code>flowchart LR\n    user((Usu\u00e1rio)) --&gt; lb[AWS ELB]\n    lb --&gt; gw[Gateway Service]\n    gw --&gt; ps[Product Service]\n    ps --&gt; redis[(Redis Cache)]\n    ps --&gt; db[(PostgreSQL)]\n    gw --&gt; other[Demais microservi\u00e7os internos]</code></pre>"},{"location":"bottlenecks/main/#conclusao","title":"\u2705 Conclus\u00e3o","text":"<p>A arquitetura de Bottlenecks integra: - Elastic Load Balancer (ELB) \u2014 distribuindo o tr\u00e1fego no n\u00edvel de entrada com resili\u00eancia autom\u00e1tica no EKS. - Redis Cache \u2014 otimizando leituras, reduzindo tempo de resposta e consumo de banco de dados. - ClusterIP interno \u2014 garantindo comunica\u00e7\u00e3o segura entre servi\u00e7os, sem exposi\u00e7\u00e3o externa desnecess\u00e1ria.</p> <p>Essas estrat\u00e9gias combinadas reduzem significativamente a lat\u00eancia, aumentam a disponibilidade e preparam o ambiente <code>store-api</code> para escalar horizontalmente sob alta demanda.</p>"},{"location":"exchangeapi/main/","title":"6. Exchange API","text":""},{"location":"exchangeapi/main/#exchange-api","title":"Exchange API","text":"<p>A Exchange API fornece servi\u00e7os de convers\u00e3o de moedas para o dom\u00ednio <code>store</code>. Ela permite consultar a taxa de c\u00e2mbio entre duas moedas (<code>from_curr</code> \u2192 <code>to_curr</code>), aplicando automaticamente o spread configurado e vinculando a opera\u00e7\u00e3o ao usu\u00e1rio autenticado.</p> <p>Trusted layer e seguran\u00e7a</p> <p>Toda requisi\u00e7\u00e3o externa entra pelo gateway. As rotas <code>/exchange/**</code> s\u00e3o protegidas: \u00e9 obrigat\u00f3rio enviar <code>Authorization: Bearer &lt;jwt&gt;</code>.</p>"},{"location":"exchangeapi/main/#visao-geral","title":"Vis\u00e3o geral","text":"<ul> <li>Service (<code>exchange-service</code>): Microservi\u00e7o em FastAPI (Python) que consulta um provedor externo de c\u00e2mbio (HTTP), aplica um spread configur\u00e1vel e retorna as cota\u00e7\u00f5es.</li> </ul> <pre><code>classDiagram\n    class ExchangeService {\n        +getExchange(from: String, to: String): QuoteOut\n    }\n\n    class QuoteOut {\n        -Double sell\n        -Double buy\n        -String date\n        -String idAccount\n    }</code></pre>"},{"location":"exchangeapi/main/#estrutura-da-requisicao","title":"Estrutura da requisi\u00e7\u00e3o","text":"<pre><code>flowchart LR\n    subgraph api [Trusted Layer]\n        direction TB\n        gateway --&gt; account\n        gateway --&gt; auth\n        account --&gt; db@{ shape: cyl, label: \"Database\" }\n        auth --&gt; account\n        gateway e1@==&gt; exchange:::red\n        gateway --&gt; product\n        gateway --&gt; order\n        product --&gt; db\n        order --&gt; db\n        order --&gt; product\n    end\n    exchange e3@==&gt; 3partyapi:::green@{label: \"3rd-party API\"}\n    internet e2@==&gt;|request| gateway\n    e1@{ animate: true }\n    e2@{ animate: true }\n    e3@{ animate: true }\n    classDef red fill:#fcc\n    classDef green fill:#cfc\n    click product \"#product-api\" \"Product API\"</code></pre>"},{"location":"exchangeapi/main/#exchange-service","title":"Exchange-Service","text":"<pre><code>\ud83d\udcc1 api/\n\u2514\u2500\u2500 \ud83d\udcc1 exchange-service/\n    \u251c\u2500\u2500 \ud83d\udcc1 app/\n    \u2502   \u251c\u2500\u2500 \ud83d\udcc4 __init__.py\n    \u2502   \u251c\u2500\u2500 \ud83d\udcc4 main.py\n    \u2502   \u251c\u2500\u2500 \ud83d\udcc4 auth.py\n    \u2502   \u251c\u2500\u2500 \ud83d\udcc4 config.py\n    \u2502   \u251c\u2500\u2500 \ud83d\udcc4 models.py\n    \u2502   \u2514\u2500\u2500 \ud83d\udcc1 clients/\n    \u2502       \u251c\u2500\u2500 \ud83d\udcc4 __init__.py\n    \u2502       \u2514\u2500\u2500 \ud83d\udcc4 rates.py\n    \u251c\u2500\u2500 \ud83d\udcc4 requirements.txt\n    \u2514\u2500\u2500 \ud83d\udcc4 Dockerfile\n</code></pre> Source requirements.txtDockerfilemain.pyauth.pyconfig.pymodels.pyclients/rates.py <pre><code>fastapi==0.115.5\nuvicorn[standard]==0.30.6\nhttpx==0.27.2\npython-jose==3.3.0\npydantic-settings==2.6.1\nPyJWT==2.9.0\n</code></pre> <pre><code>FROM python:3.12-slim\n\nWORKDIR /app\nCOPY requirements.txt .\nRUN pip install --no-cache-dir -r requirements.txt\n\nCOPY app ./app\n\nENV EXCHANGE_PORT=8080\nEXPOSE 8080\n\nCMD [\"uvicorn\", \"app.main:app\", \"--host\", \"0.0.0.0\", \"--port\", \"8080\"]\n</code></pre> <pre><code>from fastapi import FastAPI, Depends, HTTPException\nfrom app.clients.rates import fetch_rate\nfrom app.models import QuoteOut\nfrom app.auth import require_auth\nfrom app.config import settings\n\napp = FastAPI(title=\"Exchange API\", version=\"1.0.0\")\n\n@app.get(\"/exchange/{from_curr}/{to_curr}\", response_model=QuoteOut)\nasync def get_exchange(from_curr: str, to_curr: str, claims: dict = Depends(require_auth)):\n    try:\n        rate, date = await fetch_rate(from_curr, to_curr)\n    except Exception as e:\n        raise HTTPException(status_code=502, detail=f\"rate provider error: {e!s}\")\n\n    half = settings.spread / 2.0\n    sell = round(rate * (1 + half), 6)\n    buy  = round(rate * (1 - half), 6)\n\n    account_id = claims[\"id-account\"]\n    return {\"sell\": sell, \"buy\": buy, \"date\": date, \"id-account\": str(account_id)}\n</code></pre> <pre><code>from fastapi import Request, HTTPException\nimport jwt\nfrom app.config import settings\n\nasync def require_auth(request: Request) -&gt; dict:\n    # 1) Preferir o header que o gateway j\u00e1 inseriu\n    account_id = request.headers.get(\"id-account\")\n    if account_id:\n        return {\"id-account\": str(account_id)}\n\n    # 2) Fallback: pegar do Bearer token\n    auth = request.headers.get(\"Authorization\", \"\")\n    if not auth.startswith(\"Bearer \"):\n        raise HTTPException(status_code=401, detail=\"missing bearer token\")\n\n    token = auth.split()[1]\n    try:\n        claims = jwt.decode(\n            token,\n            settings.jwt_secret,\n            algorithms=[\"HS512\"],\n            options={\"verify_aud\": False},\n        )\n    except jwt.InvalidTokenError:\n        raise HTTPException(status_code=401, detail=\"invalid token\")\n\n    account_id = claims.get(\"id-account\") or claims.get(\"id\") or claims.get(\"sub\")\n    if not account_id:\n        raise HTTPException(status_code=400, detail=\"missing account id\")\n\n    return {\"id-account\": str(account_id)}\n</code></pre> <pre><code>from pydantic_settings import BaseSettings\n\nclass Settings(BaseSettings):\n    # porta do uvicorn (s\u00f3 para rodar local)\n    port: int = 8083\n\n    # API de c\u00e2mbio (sem chave por padr\u00e3o)\n    rates_base_url: str = \"https://api.exchangerate.host\"\n\n    # spread para calcular buy/sell (ex.: 0.02 = \u00b11% em cada lado)\n    spread: float = 0.02\n\n    # verifica\u00e7\u00e3o de JWT (opcional). Se n\u00e3o informar, s\u00f3 decodifica sem validar assinatura\n    jwt_secret: str | None = None          # HS256\n    jwt_public_key: str | None = None      # RS256/ES256 (PEM)\n    jwt_algorithm: str | None = None       # \"HS256\", \"RS256\", ...\n\n    class Config:\n        env_prefix = \"EXCHANGE_\"\n        env_file = \".env\"\n\nsettings = Settings()\n</code></pre> <pre><code>from pydantic import BaseModel, Field\n\nclass QuoteOut(BaseModel):\n    sell: float\n    buy: float\n    date: str\n    id_account: str = Field(..., alias=\"id-account\")\n\n    class Config:\n        # garante que o FastAPI use o alias no JSON de sa\u00edda\n        populate_by_name = True\n        orm_mode = True\n</code></pre> <pre><code>import datetime as dt\nimport httpx\n\nasync def fetch_rate(from_curr: str, to_curr: str) -&gt; tuple[float, str]:\n    \"\"\"\n    Busca a cota\u00e7\u00e3o de from_curr-&gt;to_curr em provedores p\u00fablicos e\n    entende alguns formatos de resposta diferentes.\n    Retorna (rate, date_iso). Lan\u00e7a RuntimeError se n\u00e3o conseguir extrair.\n    \"\"\"\n    f = from_curr.upper()\n    t = to_curr.upper()\n\n    # 1) exchangerate.host (forma A: /convert)\n    url_a = f\"https://api.exchangerate.host/convert?from={f}&amp;to={t}\"\n    # 2) frankfurter.app (forma B: /latest?from=&amp;to=)\n    url_b = f\"https://api.frankfurter.app/latest?from={f}&amp;to={t}\"\n    # 3) awesomeapi (forma C: /{from}-{to}/1) \u2013 retorna lista\n    url_c = f\"https://economia.awesomeapi.com.br/json/last/{f}-{t}\"\n\n    async with httpx.AsyncClient(timeout=10) as client:\n        # tente A\n        try:\n            r = await client.get(url_a)\n            data = r.json()\n            # esperado: {\"success\":true, \"info\":{\"rate\": X}, \"date\":\"YYYY-MM-DD\", ...}\n            rate = float(data.get(\"info\", {}).get(\"rate\"))\n            date = data.get(\"date\") or dt.date.today().isoformat()\n            if rate &gt; 0:\n                return rate, date\n        except Exception:\n            pass\n\n        # tente B\n        try:\n            r = await client.get(url_b)\n            data = r.json()\n            # esperado: {\"amount\":1,\"base\":\"USD\",\"date\":\"YYYY-MM-DD\",\"rates\":{\"BRL\":5.1}}\n            rates = data.get(\"rates\") or {}\n            if t in rates:\n                rate = float(rates[t])\n                date = data.get(\"date\") or dt.date.today().isoformat()\n                if rate &gt; 0:\n                    return rate, date\n        except Exception:\n            pass\n\n        # tente C\n        try:\n            r = await client.get(url_c)\n            data = r.json()\n            # esperado: {\"USDBRL\":{\"bid\":\"5.18\", \"create_date\":\"2025-10-04 16:30:00\", ...}}\n            key = f\"{f}{t}\"\n            if isinstance(data, dict) and key in data:\n                item = data[key]\n                rate = float(item.get(\"bid\") or 0)\n                date = (item.get(\"create_date\") or item.get(\"timestamp\")\n                        or dt.date.today().isoformat())\n                if rate &gt; 0:\n                    return rate, date\n        except Exception:\n            pass\n\n    # nada deu certo\n    raise RuntimeError(\"Provider schema not recognized or provider error\")\n</code></pre>"},{"location":"gatewayapi/main/","title":"3. Gateway API","text":""},{"location":"gatewayapi/main/#gateway-api","title":"Gateway API","text":"<p>A Gateway API atua como ponto \u00fanico de entrada para todos os microservi\u00e7os do dom\u00ednio <code>store</code>. Ela \u00e9 respons\u00e1vel por rotear, autenticar e auditar requisi\u00e7\u00f5es externas, aplicando pol\u00edticas de seguran\u00e7a e balanceando o tr\u00e1fego entre os servi\u00e7os internos.</p> <p>Trusted layer e seguran\u00e7a</p> <p>Toda requisi\u00e7\u00e3o externa entra exclusivamente pelo Gateway. O Gateway valida o JWT, injeta o <code>id-account</code> nos headers e redireciona a requisi\u00e7\u00e3o para o microservi\u00e7o correspondente (account, auth, order, product, exchange etc.).  </p>"},{"location":"gatewayapi/main/#visao-geral","title":"Vis\u00e3o geral","text":"<ul> <li> <p>Service (<code>gateway-service</code>): Implementado em Spring Cloud Gateway (Java).   Centraliza o roteamento HTTP para os demais microservi\u00e7os (<code>account</code>, <code>auth</code>, <code>order</code>, <code>product</code>, <code>exchange</code>).   Aplica as regras de seguran\u00e7a via filtros customizados e valida\u00e7\u00e3o de tokens JWT.  </p> </li> <li> <p>Seguran\u00e7a e Autoriza\u00e7\u00e3o   Toda requisi\u00e7\u00e3o passa por <code>AuthorizationFilter</code>, que valida o JWT e injeta o header <code>id-account</code> antes do encaminhamento ao destino.   O <code>RouterValidator</code> define quais rotas exigem autentica\u00e7\u00e3o.   O <code>CorsFilter</code> habilita o compartilhamento seguro entre dom\u00ednios (CORS).</p> </li> </ul> <pre><code>classDiagram\n    class GatewayApplication {\n        +main(String[] args)\n    }\n\n    class GatewayResource {\n        +healthCheck(): String\n    }\n\n    class AuthorizationFilter {\n        +filter(exchange, chain): Mono&lt;Void&gt;\n        -isSecured(request): boolean\n        -validateToken(token): Claims\n        -injectHeaders(request, claims)\n    }\n\n    class RouterValidator {\n        +isSecured(request): boolean\n    }\n\n    class CorsFilter {\n        +filter(exchange, chain): Mono&lt;Void&gt;\n    }\n\n    GatewayApplication --&gt; GatewayResource\n    GatewayResource --&gt; AuthorizationFilter\n    GatewayApplication --&gt; RouterValidator\n    GatewayApplication --&gt; CorsFilter\n\n    note for AuthorizationFilter \"Valida o JWT e injeta o header id-account\"\n    note for RouterValidator \"Define rotas seguras / p\u00fablicas\"\n    note for CorsFilter \"Habilita o CORS para o dom\u00ednio store\"</code></pre>"},{"location":"gatewayapi/main/#estrutura-da-requisicao","title":"Estrutura da requisi\u00e7\u00e3o","text":"<pre><code>flowchart LR\n    subgraph api [Trusted Layer]\n        direction TB\n        gateway e2@==&gt; account\n        gateway e4@==&gt; others\n        account --&gt; db@{ shape: cyl, label: \"Database\" }\n        others --&gt; db\n    end\n    internet e1@==&gt;|request| gateway:::red\n    e1@{ animate: true }\n    e2@{ animate: true }\n    e4@{ animate: true }\n    classDef red fill:#fcc</code></pre>"},{"location":"gatewayapi/main/#gateway-service","title":"Gateway-Service","text":"<pre><code>\ud83d\udcc1 api\n\u2514\u2500\u2500 \ud83d\udcc1 gateway-service/\n    \u251c\u2500\u2500 \ud83d\udcc1 k8s/\n    \u2502   \u2514\u2500\u2500 \ud83d\udcc4 k8s.yaml\n    \u251c\u2500\u2500 \ud83d\udcc1 src/\n    \u2502   \u2514\u2500\u2500 \ud83d\udcc1 main/\n    \u2502       \u251c\u2500\u2500 \ud83d\udcc1 java/\n    \u2502       \u2502   \u2514\u2500\u2500 \ud83d\udcc1 store/\n    \u2502       \u2502       \u2514\u2500\u2500 \ud83d\udcc1 gateway/\n    \u2502       \u2502           \u251c\u2500\u2500 \ud83d\udcc4 GatewayApplication.java\n    \u2502       \u2502           \u251c\u2500\u2500 \ud83d\udcc4 GatewayResource.java\n    \u2502       \u2502           \u2514\u2500\u2500 \ud83d\udcc1 security\n    \u2502       \u2502               \u251c\u2500\u2500 \ud83d\udcc4 CorsFilter.java\n    \u2502       \u2502               \u251c\u2500\u2500 \ud83d\udcc4 AuthorizationFilter.java\n    \u2502       \u2502               \u2514\u2500\u2500 \ud83d\udcc4 RouterValidator.java\n    \u2502       \u2514\u2500\u2500 \ud83d\udcc1 resources/\n    \u2502           \u2514\u2500\u2500 \ud83d\udcc4 application.yaml\n    \u251c\u2500\u2500 \ud83d\udcc4 pom.xml\n    \u251c\u2500\u2500 \ud83d\udcc4 Dockerfile\n    \u2514\u2500\u2500 \ud83d\udcc4 Jenkinsfile\n</code></pre> Source pom.xmlDockerfileJenkinsfilek8s.yamlapplication.yamlGatewayApplication.javaGatewayResource.javaCorsFilter.javaAuthorizationFilter.javaRouterValidator.java <pre><code>&lt;?xml version=\"1.0\" encoding=\"UTF-8\"?&gt;\n&lt;project xmlns=\"http://maven.apache.org/POM/4.0.0\" xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\"\n    xsi:schemaLocation=\"http://maven.apache.org/POM/4.0.0 https://maven.apache.org/xsd/maven-4.0.0.xsd\"&gt;\n    &lt;modelVersion&gt;4.0.0&lt;/modelVersion&gt;\n    &lt;parent&gt;\n        &lt;groupId&gt;org.springframework.boot&lt;/groupId&gt;\n        &lt;artifactId&gt;spring-boot-starter-parent&lt;/artifactId&gt;\n        &lt;version&gt;3.5.5&lt;/version&gt;\n        &lt;relativePath/&gt;\n    &lt;/parent&gt;\n\n    &lt;groupId&gt;store&lt;/groupId&gt;\n    &lt;artifactId&gt;gateway-service&lt;/artifactId&gt;\n    &lt;version&gt;1.0.0&lt;/version&gt;\n\n    &lt;properties&gt;\n        &lt;java.version&gt;21&lt;/java.version&gt;\n        &lt;spring-cloud.version&gt;2025.0.0&lt;/spring-cloud.version&gt;\n        &lt;maven.compiler.proc&gt;full&lt;/maven.compiler.proc&gt;\n    &lt;/properties&gt;\n\n    &lt;dependencies&gt;\n        &lt;dependency&gt;\n            &lt;groupId&gt;org.springframework.boot&lt;/groupId&gt;\n            &lt;artifactId&gt;spring-boot-starter-webflux&lt;/artifactId&gt;\n        &lt;/dependency&gt;\n        &lt;dependency&gt;\n            &lt;groupId&gt;org.springframework.cloud&lt;/groupId&gt;\n            &lt;artifactId&gt;spring-cloud-starter-gateway-server-webflux&lt;/artifactId&gt;\n        &lt;/dependency&gt;\n\n        &lt;!-- https://mvnrepository.com/artifact/org.projectlombok/lombok --&gt;\n        &lt;dependency&gt;\n            &lt;groupId&gt;org.projectlombok&lt;/groupId&gt;\n            &lt;artifactId&gt;lombok&lt;/artifactId&gt;\n            &lt;optional&gt;true&lt;/optional&gt;\n        &lt;/dependency&gt;\n\n    &lt;/dependencies&gt;\n\n    &lt;dependencyManagement&gt;\n        &lt;dependencies&gt;\n            &lt;dependency&gt;\n                &lt;groupId&gt;org.springframework.cloud&lt;/groupId&gt;\n                &lt;artifactId&gt;spring-cloud-dependencies&lt;/artifactId&gt;\n                &lt;version&gt;${spring-cloud.version}&lt;/version&gt;\n                &lt;type&gt;pom&lt;/type&gt;\n                &lt;scope&gt;import&lt;/scope&gt;\n            &lt;/dependency&gt;\n        &lt;/dependencies&gt;\n    &lt;/dependencyManagement&gt;\n\n    &lt;build&gt;\n        &lt;plugins&gt;\n            &lt;plugin&gt;\n                &lt;groupId&gt;org.springframework.boot&lt;/groupId&gt;\n                &lt;artifactId&gt;spring-boot-maven-plugin&lt;/artifactId&gt;\n                &lt;configuration&gt;\n                    &lt;excludes&gt;\n                        &lt;exclude&gt;\n                            &lt;groupId&gt;org.projectlombok&lt;/groupId&gt;\n                            &lt;artifactId&gt;lombok&lt;/artifactId&gt;\n                        &lt;/exclude&gt;\n                    &lt;/excludes&gt;\n                &lt;/configuration&gt;\n            &lt;/plugin&gt;\n        &lt;/plugins&gt;\n    &lt;/build&gt;\n\n&lt;/project&gt;\n</code></pre> <pre><code>FROM openjdk:23-slim\nVOLUME /tmp\nCOPY target/*.jar /app.jar\nENTRYPOINT [\"java\",\"-jar\",\"/app.jar\"]\n</code></pre> <pre><code>pipeline {\n    agent any\n    environment {\n        SERVICE = 'gateway'\n        NAME = \"jpqv/${env.SERVICE}\"\n    }\n    stages {\n        stage('Build') { \n            steps {\n                sh 'mvn -B -DskipTests clean package'\n            }\n        }      \n        stage('Build &amp; Push Image') {\n            steps {\n                withCredentials([usernamePassword(\n                    credentialsId: 'dockerhub-credential',\n                    usernameVariable: 'USERNAME',\n                    passwordVariable: 'TOKEN')])\n                {\n                    sh \"docker login -u $USERNAME -p $TOKEN\"\n                    sh \"docker buildx create --use --platform=linux/arm64,linux/amd64 --node multi-platform-builder-${env.SERVICE} --name multi-platform-builder-${env.SERVICE}\"\n                    sh \"docker buildx build --platform=linux/arm64,linux/amd64 --push --tag ${env.NAME}:latest --tag ${env.NAME}:${env.BUILD_ID} -f DockerFile .\"\n                    sh \"docker buildx rm --force multi-platform-builder-${env.SERVICE}\"\n                }\n            }\n        }\n    }\n}\n</code></pre> <pre><code>apiVersion: apps/v1\nkind: Deployment\nmetadata:\n  name: gateway\nspec:\n  replicas: 1\n  selector:\n    matchLabels:\n      app: gateway\n  template:\n    metadata:\n      labels:\n        app: gateway\n    spec:\n      containers:\n        - name: gateway\n          image: jpqv/gateway:latest\n          imagePullPolicy: Always\n          ports:\n            - containerPort: 8080\n          resources:\n            requests:\n              memory: \"200Mi\"\n              cpu: \"50m\"\n            limits:\n              memory: \"300Mi\"\n              cpu: \"200m\"\n\n---\n\napiVersion: v1\nkind: Service\nmetadata:\n  name: gateway\n  labels:\n    app: gateway\nspec:\n  type: LoadBalancer\n  ports:\n    - port: 80\n      protocol: TCP\n      targetPort: 8080\n\n  selector:\n    app: gateway\n</code></pre> <pre><code>server:\n  port: 8080\n\nspring:\n  application:\n    name: gateway\n\n  mvc:\n    problemdetails:\n      enabled: true\n\n  cloud:\n    gateway:\n      server:\n        webflux:\n          routes:\n\n            - id: insper\n              uri: https://www.insper.edu.br\n              predicates:\n                - Path=/insper/**\n\n            - id: account\n              uri: http://account:8080\n              predicates:\n                - Path=/account/**\n\n            - id: auth\n              uri: http://auth:8080\n              predicates:\n                - Path=/auth/**\n\n            - id: product\n              uri: http://product:8080\n              predicates:\n                - Path=/product/**\n\n            - id: order\n              uri: http://order:8080\n              predicates:\n                - Path=/order/**\n\n            - id: exchange\n              uri: http://exchange:8080\n              predicates:\n                - Path=/exchange/**\n\n          globalcors:\n            corsConfigurations:\n              '[/**]':\n                allowedOrigins: \"*\"\n                allowedHeaders: \"*\"\n                allowedMethods: \"*\"\n\nlogging:\n  level:\n    root: info\n    store: debug\n</code></pre> <pre><code>package store.gateway;\n\nimport org.springframework.boot.SpringApplication;\nimport org.springframework.boot.autoconfigure.SpringBootApplication;\n\n@SpringBootApplication\npublic class GatewayApplication {\n\n    public static void main(String[] args) {\n        SpringApplication.run(GatewayApplication.class, args);\n    }\n\n}\n</code></pre> <pre><code>package store.gateway;\n\nimport java.util.Map;\n\nimport org.springframework.http.ResponseEntity;\nimport org.springframework.web.bind.annotation.GetMapping;\nimport org.springframework.web.bind.annotation.RestController;\n\n\n@RestController\npublic class GatewayResource {\n\n    @GetMapping(\"/health-check\")\n    public ResponseEntity&lt;Map&lt;String, String&gt;&gt; healthCheck() {\n        return ResponseEntity.ok()\n            .body(Map.of(\n                \"osArch\", System.getProperty(\"os.arch\"),\n                \"osName\", System.getProperty(\"os.name\"),\n                \"osVersision\", System.getProperty(\"os.version\")\n            ));\n    }\n\n    @GetMapping(\"/\")\n    public ResponseEntity&lt;String&gt; hello() {\n        return ResponseEntity.ok()\n            .body(\"API for Store\");\n    }\n\n}\n</code></pre> <pre><code>package store.gateway.security;\n\nimport org.springframework.context.annotation.Bean;\nimport org.springframework.context.annotation.Configuration;\nimport org.springframework.web.cors.CorsConfiguration;\nimport org.springframework.web.cors.reactive.CorsWebFilter;\nimport org.springframework.web.cors.reactive.UrlBasedCorsConfigurationSource;\n\n@Configuration\npublic class CorsFilter {\n\n    @Bean\n    public CorsWebFilter corsWebFilter() {\n        CorsConfiguration corsConfig = new CorsConfiguration();\n        corsConfig.setAllowCredentials(false);\n        corsConfig.addAllowedMethod(\"*\");\n        corsConfig.addAllowedOrigin(\"*\");\n        corsConfig.addAllowedHeader(\"*\");\n\n        UrlBasedCorsConfigurationSource source = new UrlBasedCorsConfigurationSource();\n        source.registerCorsConfiguration(\"/**\", corsConfig);\n\n        return new CorsWebFilter(source);\n    }\n\n}\n</code></pre> <pre><code>package store.gateway.security;\n\nimport java.util.Map;\n\nimport org.slf4j.Logger;\nimport org.slf4j.LoggerFactory;\nimport org.springframework.beans.factory.annotation.Autowired;\nimport org.springframework.cloud.gateway.filter.GatewayFilterChain;\nimport org.springframework.cloud.gateway.filter.GlobalFilter;\nimport org.springframework.http.HttpHeaders;\nimport org.springframework.http.HttpStatus;\nimport org.springframework.http.MediaType;\nimport org.springframework.http.server.reactive.ServerHttpRequest;\nimport org.springframework.stereotype.Component;\nimport org.springframework.web.reactive.function.client.WebClient;\nimport org.springframework.web.server.ResponseStatusException;\nimport org.springframework.web.server.ServerWebExchange;\n\nimport reactor.core.publisher.Mono;\n\n@Component\npublic class AuthorizationFilter implements GlobalFilter {\n\n    private Logger logger = LoggerFactory.getLogger(AuthorizationFilter.class);\n    private static final String AUTHORIZATION_HEADER = \"Authorization\";\n    private static final String AUTHORIZATION_BEARER_HEADER = \"Bearer\";\n    private static final String AUTH_SERVICE_TOKEN_SOLVE = \"http://auth:8080/auth/solve\";\n\n    @Autowired\n    private RouterValidator routerValidator;\n\n    @Autowired\n    private WebClient.Builder webClient;\n\n    @Override\n    public Mono&lt;Void&gt; filter(ServerWebExchange exchange, GatewayFilterChain chain) {\n        logger.debug(\"filter: entrou no filtro de autorizacao\");\n        ServerHttpRequest request = exchange.getRequest();\n\n        if (!routerValidator.isSecured.test(request)) {\n            logger.debug(\"filter: rota nao eh segura\");\n            return chain.filter(exchange);\n        }\n        logger.debug(\"filter: rota eh segura\");\n\n        if (!isAuthMissing(request)) {\n            logger.debug(\"filter: tem [Authorization] no Header\");\n            String authorization = request.getHeaders().get(AUTHORIZATION_HEADER).get(0);\n            logger.debug(String.format(\n                \"filter: [Authorization]=[%s]\",\n                authorization\n            ));\n            String[] parts = authorization.split(\" \");\n            if (parts.length != 2) {\n                logger.debug(\"filter: bearer token is invalid\");\n                throw new ResponseStatusException(HttpStatus.UNAUTHORIZED, \"Authorization header is not well formatted\");\n            }\n            if (!AUTHORIZATION_BEARER_HEADER.equals(parts[0])) {\n                logger.debug(\"filter: bearer token is invalid\");\n                throw new ResponseStatusException(HttpStatus.UNAUTHORIZED, \"Authorization header is not well formatted\");\n            }\n            logger.debug(\"filter: bearer token is formatted\");\n\n            final String jwt = parts[1];\n\n            return requestAuthTokenSolve(exchange, chain, jwt);\n\n        }\n        logger.debug(\"filter: access is denied!\");\n        // if access is denied\n        throw new ResponseStatusException(HttpStatus.UNAUTHORIZED);\n    }\n\n    private boolean isAuthMissing(ServerHttpRequest request) {\n        return !request.getHeaders().containsKey(AUTHORIZATION_HEADER);\n    }\n\n    // este metodo eh responsavel por enviar o token ao Auth Microservice\n    // a fim de interpretar o token, a chamada eh feita via Rest.\n    private Mono&lt;Void&gt; requestAuthTokenSolve(ServerWebExchange exchange, GatewayFilterChain chain, String jwt) {\n        logger.debug(\"solve: solving jwt: \" + jwt);\n        return webClient\n            .defaultHeader(\n                HttpHeaders.CONTENT_TYPE, MediaType.APPLICATION_JSON_VALUE\n            )\n            .build()\n            .post()\n            .uri(AUTH_SERVICE_TOKEN_SOLVE)\n            .bodyValue(Map.of(\n                \"jwt\", jwt)\n            )\n            .retrieve()\n            .toEntity(Map.class)\n            .flatMap(response -&gt; {\n                if (response != null &amp;&amp; response.hasBody() &amp;&amp; response.getBody() != null) {\n                    final Map&lt;String, String&gt; map = response.getBody();\n                    String idAccount = map.get(\"idAccount\");\n                    logger.debug(\"solve: id account: \" + idAccount);\n                    ServerWebExchange authorizated = updateRequest(exchange, idAccount);\n                    return chain.filter(authorizated);\n                } else {\n                    throw new ResponseStatusException(HttpStatus.UNAUTHORIZED, \"Invalid token\");\n                }\n            });\n    }\n\n    private ServerWebExchange updateRequest(ServerWebExchange exchange, String idAccount) {\n        logger.debug(\"original headers: \" + exchange.getRequest().getHeaders().toString());\n        ServerWebExchange modified = exchange.mutate()\n            .request(\n                exchange.getRequest()\n                    .mutate()\n                    .header(\"id-account\", idAccount)\n                    .build()\n            ).build();\n        logger.debug(\"updated headers: \" + modified.getRequest().getHeaders().toString());\n        return modified;\n    }    \n\n}\n</code></pre> <pre><code>package store.gateway.security;\n\nimport java.util.List;\nimport java.util.function.Predicate;\n\nimport org.springframework.http.server.reactive.ServerHttpRequest;\nimport org.springframework.stereotype.Component;\n\n@Component\npublic class RouterValidator {\n\n        private List&lt;String&gt; openApiEndpoints = List.of(\n                \"POST /auth/register\",\n                \"POST /auth/login\"\n        );\n\n        public Predicate&lt;ServerHttpRequest&gt; isSecured =\n                request -&gt; openApiEndpoints\n                        .stream()\n                        .noneMatch(uri -&gt; {\n                                String[] parts = uri.replaceAll(\"[^a-zA-Z0-9// *]\", \"\").split(\" \");\n                                final String method = parts[0];\n                                final String path = parts[1];\n                                final boolean deep = path.endsWith(\"/**\");\n                                return (\"ANY\".equalsIgnoreCase(method) || request.getMethod().toString().equalsIgnoreCase(method))\n                                        &amp;&amp; (request.getURI().getPath().equals(path) || (deep &amp;&amp; request.getURI().getPath().startsWith(path.replace(\"/**\", \"\"))));\n                        });\n\n}\n</code></pre> mvn clean package spring-boot:run"},{"location":"jenkins/main/","title":"7. Jenkins","text":""},{"location":"jenkins/main/#jenkins-cicd-store-project","title":"Jenkins CI/CD \u2013 Store Project","text":"<p>A esteira de CI/CD do dom\u00ednio <code>store</code> \u00e9 orquestrada pelo Jenkins. Existem tr\u00eas tipos de pipelines:</p> <p>1) Interfaces (<code>account</code>, <code>auth</code>, <code>product</code>, <code>order</code>, \u2026)    - Compilam e disponibilizam artefatos Maven</p> <p>2) Servi\u00e7os \u2013 Build Docker  (<code>gateway-service</code>, <code>account-service</code>, <code>auth-service</code>, <code>product-service</code>, <code>order-service</code>, \u2026)    - Compila\u00e7\u00e3o + publica\u00e7\u00e3o da imagem no Docker Hub</p> <p>3) Servi\u00e7os \u2013 Build Docker + Deploy no Kubernetes (EKS)  (<code>gateway-service</code>, <code>account-service</code>, <code>auth-service</code>, <code>product-service</code>, <code>order-service</code>, \u2026)    - Ap\u00f3s o push da imagem, o Jenkins atualiza o Deployment no cluster AWS EKS</p>"},{"location":"jenkins/main/#status-atual-dos-pipelines","title":"Status atual dos pipelines","text":"<p>A captura abaixo mostra o painel do Jenkins com os \u00faltimos runs de todas as pipelines ativas:</p> <p></p>"},{"location":"jenkins/main/#padroes-de-pipeline","title":"Padr\u00f5es de pipeline","text":""},{"location":"jenkins/main/#1-interfaces-apenas-build-maven","title":"1) Interfaces \u2013 apenas build Maven","text":"<pre><code>pipeline {\n    agent any\n\n    stages {\n        stage('Build') {\n            steps {\n                sh 'mvn -B -DskipTests clean install'\n            }\n        }\n    }\n}\n</code></pre> <p>Objetivo: disponibilizar artefatos (JARs) para que os servi\u00e7os possam compilar contra as \u00faltimas mudan\u00e7as de contrato/DTOs.</p>"},{"location":"jenkins/main/#2-servicos-build-dependencias-e-imagem-docker","title":"2) Servi\u00e7os \u2013 build, depend\u00eancias e imagem Docker","text":"<pre><code>pipeline {\n    agent any\n    environment {\n        SERVICE = &lt;nome_servi\u00e7o&gt;            // nome l\u00f3gico do servi\u00e7o\n        NAME = \"&lt;conta_dockerhub&gt;/${env.SERVICE}\"   // reposit\u00f3rio de imagem no Docker Hub\n    }\n    stages {\n        stage('Dependecies') {\n            steps {\n                // dispara o job da interface correspondente e aguarda concluir\n                build job: &lt;nome_interface&gt;, wait: true\n            }\n        }\n        stage('Build') { \n            steps {\n                sh 'mvn -B -DskipTests clean package'\n            }\n        }      \n        stage('Build &amp; Push Image') {\n            steps {\n                withCredentials([usernamePassword(\n                    credentialsId: 'dockerhub-credential',\n                    usernameVariable: 'USERNAME',\n                    passwordVariable: 'TOKEN')]) {\n                    sh \"docker login -u $USERNAME -p $TOKEN\"\n\n                    // builder multi-arch ef\u00eamero\n                    sh \"docker buildx create --use --platform=linux/arm64,linux/amd64 --node multi-platform-builder-${env.SERVICE} --name multi-platform-builder-${env.SERVICE}\"\n\n                    // build + push tags :latest e :BUILD_ID\n                    sh \"docker buildx build --platform=linux/arm64,linux/amd64 --push --tag ${env.NAME}:latest --tag ${env.NAME}:${env.BUILD_ID} -f DockerFile .\"\n\n                    // limpeza do builder\n                    sh \"docker buildx rm --force multi-platform-builder-${env.SERVICE}\"\n                }\n            }\n        }\n    }\n}\n</code></pre> <p>Objetivo: gerar imagem Docker pronta para deploy (multi-arch), com versionamento por <code>BUILD_ID</code> e tag <code>latest</code>.</p>"},{"location":"jenkins/main/#3-servicos-build-dependencias-e-imagem-docker-e-deploy-kubernetes","title":"3) Servi\u00e7os \u2013 build, depend\u00eancias e imagem Docker e Deploy Kubernetes","text":"<pre><code>pipeline {\n    agent any\n    environment {\n        SERVICE = &lt;nome_servi\u00e7o&gt;            // nome l\u00f3gico do servi\u00e7o\n        NAME = \"&lt;conta_dockerhub&gt;/${env.SERVICE}\"   // reposit\u00f3rio de imagem no Docker Hub\n        AWS_REGION  = &lt;regi\u00e3o&gt;       // sua regi\u00e3o\n        EKS_CLUSTER = &lt;nome_cluster&gt;           // nome do cluster EKS\n    }\n    stages {\n        stage('Dependecies') {\n            steps {\n                // dispara o job da interface correspondente e aguarda concluir\n                build job: &lt;nome_interface&gt;, wait: true\n            }\n        }\n        stage('Build') { \n            steps {\n                sh 'mvn -B -DskipTests clean package'\n            }\n        }      \n        stage('Build &amp; Push Image') {\n            steps {\n                withCredentials([usernamePassword(\n                    credentialsId: 'dockerhub-credential',\n                    usernameVariable: 'USERNAME',\n                    passwordVariable: 'TOKEN')]) {\n                    sh \"docker login -u $USERNAME -p $TOKEN\"\n\n                    // builder multi-arch ef\u00eamero\n                    sh \"docker buildx create --use --platform=linux/arm64,linux/amd64 --node multi-platform-builder-${env.SERVICE} --name multi-platform-builder-${env.SERVICE}\"\n\n                    // build + push tags :latest e :BUILD_ID\n                    sh \"docker buildx build --platform=linux/arm64,linux/amd64 --push --tag ${env.NAME}:latest --tag ${env.NAME}:${env.BUILD_ID} -f DockerFile .\"\n\n                    // limpeza do builder\n                    sh \"docker buildx rm --force multi-platform-builder-${env.SERVICE}\"\n                }\n            }\n        }\n        stage('Deploy to EKS') {\n            steps {\n                // Usa credenciais AWS do Jenkins (Access Key / Secret)\n                withCredentials([[$class: 'AmazonWebServicesCredentialsBinding',\n                credentialsId: 'aws-credential',\n                accessKeyVariable: 'AWS_ACCESS_KEY_ID',\n                secretKeyVariable: 'AWS_SECRET_ACCESS_KEY']]) {\n                sh \"\"\"\n                    # garante diret\u00f3rio padr\u00e3o do kubeconfig\n                    mkdir -p ~/.kube\n\n                    # configura contexto do cluster no caminho padr\u00e3o (~/.kube/config)\n                    aws eks update-kubeconfig --region ${AWS_REGION} --name ${EKS_CLUSTER}\n\n                    kubectl config current-context\n\n                    # aplica manifest inicial se ainda n\u00e3o existir\n                    if ! kubectl get deploy ${SERVICE} &gt;/dev/null 2&gt;&amp;1; then\n                    kubectl apply -f ./k8s/k8s.yaml\n                    fi\n\n                    # atualiza a imagem do Deployment\n                    kubectl set image deploy/${SERVICE} ${SERVICE}=${NAME}:${BUILD_ID} --record\n\n                    # espera o rollout\n                    kubectl rollout status deployment/${SERVICE} --timeout=180s\n                \"\"\"\n                }\n            }\n        }\n    }\n}\n</code></pre> <p>Objetivo: gerar imagem Docker pronta para deploy (multi-arch), com versionamento por <code>BUILD_ID</code> e tag <code>latest</code>, e fazer deploy dessa imagem na AWS usando o Kubernetes EKS.</p>"},{"location":"jenkins/main/#fluxo-resumido","title":"Fluxo resumido","text":""},{"location":"jenkins/main/#fkuxo-resumido-sem-deploy","title":"Fkuxo resumido sem Deploy","text":"<pre><code>flowchart TB\n    subgraph Jenkins\n        I[Job Interface&lt;br/&gt;mvn clean install] --&gt;|artefato| S[Job Servi\u00e7o&lt;br/&gt;mvn package]\n        S --&gt; D[Build: build &amp; push Docker&lt;br/&gt;:latest e :BUILD_ID]\n    end\n    D --&gt; REG[(Docker Hub)]</code></pre>"},{"location":"jenkins/main/#fkuxo-resumido-com-deploy","title":"Fkuxo resumido com Deploy","text":"<pre><code>flowchart TB\n    subgraph Jenkins\n        I[Job Interface&lt;br/&gt;mvn clean install] --&gt;|artefato| S[Job Servi\u00e7o&lt;br/&gt;mvn package]\n        S --&gt; D[Build &amp;amp; Push Docker Image&lt;br/&gt;:latest e :BUILD_ID]\n        D --&gt; K[Deploy to EKS&lt;br/&gt;kubectl rollout]\n    end\n    D --&gt; REG[(Docker Hub)]\n    K --&gt; EKS[(AWS EKS Cluster)]</code></pre>"},{"location":"jenkins/main/#localizacao-dos-jenkinsfiles","title":"Localiza\u00e7\u00e3o dos Jenkinsfiles","text":"<p>Os <code>Jenkinsfile</code> de cada componente est\u00e3o nas documenta\u00e7\u00f5es das respectivas APIs:</p> Componente Documenta\u00e7\u00e3o Account (interface) Account API Account-Service Account API Auth (interface) Auth API Auth-Service Auth API Gateway-Service Gateway API Product (interface) Product API Product-Service Product API Order (interface) Order API Order-Service Order API <p>Cada p\u00e1gina detalha o <code>Jenkinsfile</code> correspondente via bloco Source.</p>"},{"location":"jenkins/main/#notas-operacionais","title":"Notas operacionais","text":"<ul> <li>Credenciais: o push de imagens usa o secret <code>dockerhub-credential</code> (usu\u00e1rio/senha).  </li> <li>Multi-arch: as imagens s\u00e3o publicadas para <code>linux/amd64</code> e <code>linux/arm64</code> via <code>buildx</code>.  </li> <li>Depend\u00eancias: servi\u00e7os disparam o job da interface para garantir que compilam contra a vers\u00e3o mais recente dos contratos.</li> <li>Deploy cont\u00ednuo: servi\u00e7os utilizam o stage <code>Deploy to EKS</code></li> <li>Autentica\u00e7\u00e3o AWS no Jenkins via credencial <code>aws-credential</code> (Access Key / Secret)</li> <li>kubectl utiliza kubeconfig configurado automaticamente:   <pre><code>aws eks update-kubeconfig --region &lt;regi\u00e3o&gt; --name &lt;cluster&gt;\n</code></pre></li> </ul> <p>\u2705 Este documento confirma que todos os pipelines necess\u00e1rios est\u00e3o configurados e operando conforme o desenho do projeto: - Interfaces \u2192 compilam artefatos Maven - Servi\u00e7os \u2192 geram e publicam imagens Docker - Deploy automatizado \u2192 Jenkins atualiza os Deployments no EKS ap\u00f3s cada build da branch <code>main</code> </p>"},{"location":"kubernets/main/","title":"8. Kubernets","text":""},{"location":"kubernets/main/#kubernetes-deployment-store-project","title":"Kubernetes Deployment \u2013 Store Project","text":"<p>O ambiente Kubernetes (K8s) \u00e9 respons\u00e1vel por orquestrar, escalar e manter os microservi\u00e7os do projeto em execu\u00e7\u00e3o cont\u00ednua e resiliente. Os manifests seguem um padr\u00e3o \u00fanico de modulariza\u00e7\u00e3o, dividindo os componentes de banco de dados, servi\u00e7os de aplica\u00e7\u00e3o e gateway de entrada.</p>"},{"location":"kubernets/main/#estrutura-e-padrao-de-deploy","title":"Estrutura e Padr\u00e3o de Deploy","text":"<p>A infraestrutura do <code>store</code> \u00e9 organizada em m\u00faltiplos deployments e services, um para cada componente do sistema.</p> <p>1) Banco de dados (PostgreSQL)    - Mantido em um \u00fanico Deployment.    - Configura\u00e7\u00e3o via ConfigMap e Secret.    - Exposto internamente por <code>ClusterIP</code>.  </p> <p>2) Servi\u00e7os de dom\u00ednio (<code>account-service</code>, <code>auth-service</code>, <code>product-service</code>, <code>order-service</code>)    - Deployments independentes.    - Cada um exposto via <code>Service</code> tipo <code>ClusterIP</code>.    - Comunica\u00e7\u00e3o via DNS interno do cluster (<code>service-name.namespace.svc.cluster.local</code>).  </p> <p>3) Gateway-Service    - Exposto via LoadBalancer (AWS NLB ou ALB).    - Respons\u00e1vel por receber tr\u00e1fego externo e redirecionar requisi\u00e7\u00f5es internas.</p>"},{"location":"kubernets/main/#status-atual-no-eks","title":"Status atual no EKS","text":"<p>As capturas abaixo mostram o painel do EKS com os status de todos os deploys dos servi\u00e7os atuais:</p> <p> </p>"},{"location":"kubernets/main/#diagrama-geral","title":"Diagrama Geral","text":"<pre><code>flowchart TB\n    subgraph AWS_EKS[\"EKS Cluster (namespace: store)\"]\n        DB[(Postgres Service\\nClusterIP)]\n        GW[\"Gateway (LoadBalancer)\"]\n        ACC[\"Account-Service\"]\n        AUTH[\"Auth-Service\"]\n        ORD[\"Order-Service\"]\n        PROD[\"Product-Service\"]\n        EXC[\"Exchange-Service\"]\n\n        GW --&gt; AUTH\n        GW --&gt; ACC\n        GW --&gt; ORD\n        GW --&gt; PROD\n        GW --&gt; EXC\n        ACC --&gt; DB\n        AUTH --&gt; DB\n        ORD --&gt; DB\n        PROD --&gt; DB\n    end\n\n    EXT[Internet Client]\n    3PP[3partyapi]\n    EXT --&gt; GW\n    EXC --&gt; 3PP</code></pre>"},{"location":"kubernets/main/#localizacao-dos-manifests","title":"Localiza\u00e7\u00e3o dos manifests","text":"<p>Todos os arquivos de configura\u00e7\u00e3o do Kubernetes est\u00e3o organizados por servi\u00e7o, dentro da pasta <code>k8s</code> de cada m\u00f3dulo:</p> Componente Documenta\u00e7\u00e3o Account-Service Account API Auth-Service Auth API Gateway-Service Gateway API Product-Service Product API Order-Service Order API"},{"location":"kubernets/main/#deploy-no-kubernetes-comandos-utilizados","title":"\ud83d\udee0\ufe0f Deploy no Kubernetes \u2013 Comandos Utilizados","text":"<p>O deploy no cluster Kubernetes \u00e9 feito aplicando os manifests localizados na pasta <code>k8s</code> de cada servi\u00e7o dentro do diret\u00f3rio <code>api/</code>.</p> <p>Os comandos seguem o padr\u00e3o abaixo \ud83d\udc47</p>"},{"location":"kubernets/main/#1-banco-de-dados-postgresql","title":"\ud83d\uddc4\ufe0f 1\ufe0f\u20e3 Banco de Dados \u2013 PostgreSQL","text":"<p>Executar os manifests na ordem correta:</p> <pre><code># Secrets (credenciais de acesso)\nkubectl apply -f ./k8s/secrets.yaml\nkubectl get secrets\n\n# ConfigMap (nome do banco)\nkubectl apply -f ./k8s/configmap.yaml\nkubectl get configmap\n\n# Deployment e Pod\nkubectl apply -f ./k8s/deployment.yaml\nkubectl get deployments\nkubectl get pods\n\n# Servi\u00e7o interno (ClusterIP)\nkubectl apply -f ./k8s/service.yaml\nkubectl get services\n</code></pre>"},{"location":"kubernets/main/#2-todos-os-demais-servicos","title":"\ud83e\udde9 2\ufe0f\u20e3 Todos os demais servi\u00e7os","text":"<p>(account-service, auth-service, product-service, order-service, redis-service e gateway-service)</p> <pre><code>kubectl apply -f ./k8s/k8s.yaml\nkubectl get deployments\nkubectl get pods\nkubectl get services\n</code></pre>"},{"location":"kubernets/main/#verificar-os-status-dos-servicos","title":"Verificar os status dos servi\u00e7os","text":"<pre><code>kubectl get all\n</code></pre>"},{"location":"kubernets/main/#notas-operacionais","title":"Notas operacionais","text":"<ul> <li>Namespace: <code>store</code> (pode ser criado via <code>kubectl create ns store</code>).  </li> <li>Banco de dados: volume persistente opcional a ser configurado no futuro.  </li> <li>Gateway: exposto publicamente via AWS Load Balancer (NLB por padr\u00e3o).  </li> <li>Rede interna: comunica\u00e7\u00e3o entre microservi\u00e7os via DNS do cluster (<code>service-name</code>).  </li> <li>Ambiente: compat\u00edvel com EKS, Minikube, ou Kind (ambiente local).  </li> </ul> <p>\u2705 Este documento confirma que todos os manifests Kubernetes necess\u00e1rios est\u00e3o padronizados, versionados e prontos para deploy no cluster AWS EKS, garantindo isolamento por servi\u00e7o e integra\u00e7\u00e3o completa via o Gateway.</p>"},{"location":"orderapi/main/","title":"5. Order API","text":""},{"location":"orderapi/main/#order-api","title":"Order API","text":"<p>A Order API gerencia os pedidos do dom\u00ednio <code>store</code>, permitindo criar e consultar ordens associadas ao usu\u00e1rio autenticado. Ela segue o padr\u00e3o adotado no projeto: interface (<code>order</code>) e service (<code>order-service</code>) atr\u00e1s do gateway e protegidos por JWT.</p> <p>Trusted layer e seguran\u00e7a</p> <p>Toda requisi\u00e7\u00e3o externa entra pelo gateway. As rotas <code>/order/**</code> s\u00e3o protegidas: \u00e9 obrigat\u00f3rio enviar <code>Authorization: Bearer &lt;jwt&gt;</code>.</p>"},{"location":"orderapi/main/#visao-geral","title":"Vis\u00e3o geral","text":"<ul> <li>Interface (<code>order</code>): define o contrato (DTOs e Feign) consumido por outros m\u00f3dulos/fronts.  </li> <li>Service (<code>order-service</code>): implementa\u00e7\u00e3o REST, regras de neg\u00f3cio, persist\u00eancia (JPA), e migra\u00e7\u00f5es (Flyway).  </li> </ul> <pre><code>classDiagram\n    namespace order {\n        class OrderController {\n            +create(OrderIn orderIn): OrderOut\n            +findAll(): List&lt;OrderOut&gt;\n            +findById(String id): OrderOut\n        }\n\n        class OrderIn {\n            -List&lt;OrderItemIn&gt; items\n        }\n\n        class OrderItemIn {\n            -String idProduct\n            -int quantity\n        }\n\n        class OrderOut {\n            -String id\n            -String date\n            -List&lt;OrderItemOut&gt; items\n            -Double total\n        }\n\n        class OrderItemOut {\n            -String id\n            -ProductOut product\n            -int quantity\n            -Double total\n        }\n    }\n    namespace order-service {\n        class OrderResource {\n            +create(OrderIn orderIn): OrderOut\n            +findAll(): List&lt;OrderOut&gt;\n            +findById(String id): OrderOut\n        }\n\n        class OrderService {\n            +create(OrderIn orderIn): OrderOut\n            +findAll(): List&lt;OrderOut&gt;\n            +findById(String id): OrderOut\n        }\n\n        class OrderRepository {\n            +save(Order order): Order\n            +findAll(): List&lt;Order&gt;\n            +findById(String id): Optional&lt;Order&gt;\n        }\n\n        class Order {\n            -String id\n            -String date\n            -List~OrderItem~ items\n        }\n\n        class OrderItem {\n            -String id\n            -String idProduct\n            -int quantity\n            -Double total\n        }\n\n        class OrderModel {\n            +toEntity(OrderIn orderIn): Order\n            +toOut(Order order): OrderOut\n        }\n    }\n    &lt;&lt;Interface&gt;&gt; OrderController\n    OrderController ..&gt; OrderIn\n    OrderController ..&gt; OrderOut\n\n    &lt;&lt;Interface&gt;&gt; OrderRepository\n    OrderController &lt;|-- OrderResource\n    OrderResource *-- OrderService\n    OrderService *-- OrderRepository\n    OrderService ..&gt; Order\n    OrderService ..&gt; OrderModel\n    OrderRepository ..&gt; Order\n    Order ..&gt; OrderItem\n    OrderOut ..&gt; OrderItemOut\n    OrderItemOut ..&gt; ProductOut</code></pre>"},{"location":"orderapi/main/#estrutura-da-requisicao","title":"Estrutura da requisi\u00e7\u00e3o","text":"<pre><code>flowchart LR\n    subgraph api [Trusted Layer]\n        direction TB\n        gateway --&gt; account\n        gateway --&gt; auth\n        account --&gt; db@{ shape: cyl, label: \"Database\" }\n        auth --&gt; account\n        gateway --&gt; product\n        gateway e6@==&gt; order:::red\n        product --&gt; db\n        order e3@==&gt; db\n        order e4@==&gt; product\n    end\n    internet e1@==&gt;|request| gateway\n    e1@{ animate: true }\n    e3@{ animate: true }\n    e4@{ animate: true }\n    e6@{ animate: true }\n    classDef red fill:#fcc\n    click order \"#order-api\" \"Order API\"</code></pre>"},{"location":"orderapi/main/#order","title":"Order","text":"<pre><code>\ud83d\udcc1 api/\n\u2514\u2500\u2500 \ud83d\udcc1 order/\n    \u251c\u2500\u2500 \ud83d\udcc1 src/\n    \u2502   \u2514\u2500\u2500 \ud83d\udcc1 main/\n    \u2502       \u2514\u2500\u2500 \ud83d\udcc1 java/\n    \u2502           \u2514\u2500\u2500 \ud83d\udcc1 store/\n    \u2502               \u2514\u2500\u2500 \ud83d\udcc1 order/\n    \u2502                   \u251c\u2500\u2500 \ud83d\udcc4 OrderController.java\n    \u2502                   \u251c\u2500\u2500 \ud83d\udcc4 OrderIn.java\n    \u2502                   \u251c\u2500\u2500 \ud83d\udcc4 OrderOut.java\n    \u2502                   \u251c\u2500\u2500 \ud83d\udcc4 OrderItemIn.java\n    \u2502                   \u2514\u2500\u2500 \ud83d\udcc4 OrderItemOut.java\n    \u251c\u2500\u2500 \ud83d\udcc4 pom.xml\n    \u2514\u2500\u2500 \ud83d\udcc4 Jenkinsfile\n</code></pre> Source pom.xmlJenkinsfileOrderController.javaOrderIn.javaOrderOut.javaOrderItemIn.javaOrderItemOut.java <pre><code>&lt;?xml version=\"1.0\" encoding=\"UTF-8\"?&gt;\n&lt;project xmlns=\"http://maven.apache.org/POM/4.0.0\" xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\"\n    xsi:schemaLocation=\"http://maven.apache.org/POM/4.0.0 https://maven.apache.org/xsd/maven-4.0.0.xsd\"&gt;\n    &lt;modelVersion&gt;4.0.0&lt;/modelVersion&gt;\n    &lt;parent&gt;\n        &lt;groupId&gt;org.springframework.boot&lt;/groupId&gt;\n        &lt;artifactId&gt;spring-boot-starter-parent&lt;/artifactId&gt;\n        &lt;version&gt;3.5.5&lt;/version&gt;\n        &lt;relativePath/&gt;\n    &lt;/parent&gt;\n\n    &lt;groupId&gt;store&lt;/groupId&gt;\n    &lt;artifactId&gt;order&lt;/artifactId&gt;\n    &lt;version&gt;1.0.0&lt;/version&gt;\n\n    &lt;properties&gt;\n        &lt;java.version&gt;21&lt;/java.version&gt;\n        &lt;spring-cloud.version&gt;2025.0.0&lt;/spring-cloud.version&gt;\n        &lt;maven.compiler.proc&gt;full&lt;/maven.compiler.proc&gt;\n    &lt;/properties&gt;\n\n    &lt;dependencies&gt;\n        &lt;dependency&gt;\n            &lt;groupId&gt;org.springframework.boot&lt;/groupId&gt;\n            &lt;artifactId&gt;spring-boot-starter-web&lt;/artifactId&gt;\n        &lt;/dependency&gt;\n        &lt;dependency&gt;\n            &lt;groupId&gt;org.springframework.cloud&lt;/groupId&gt;\n            &lt;artifactId&gt;spring-cloud-starter-openfeign&lt;/artifactId&gt;\n        &lt;/dependency&gt;\n\n        &lt;!-- Reuso de DTO de produto no OrderItemOut --&gt;\n        &lt;dependency&gt;\n            &lt;groupId&gt;store&lt;/groupId&gt;\n            &lt;artifactId&gt;product&lt;/artifactId&gt;\n            &lt;version&gt;${project.version}&lt;/version&gt;\n        &lt;/dependency&gt;\n\n        &lt;dependency&gt;\n            &lt;groupId&gt;org.projectlombok&lt;/groupId&gt;\n            &lt;artifactId&gt;lombok&lt;/artifactId&gt;\n            &lt;optional&gt;true&lt;/optional&gt;\n        &lt;/dependency&gt;\n    &lt;/dependencies&gt;\n\n    &lt;dependencyManagement&gt;\n        &lt;dependencies&gt;\n            &lt;dependency&gt;\n                &lt;groupId&gt;org.springframework.cloud&lt;/groupId&gt;\n                &lt;artifactId&gt;spring-cloud-dependencies&lt;/artifactId&gt;\n                &lt;version&gt;${spring-cloud.version}&lt;/version&gt;\n                &lt;type&gt;pom&lt;/type&gt;\n                &lt;scope&gt;import&lt;/scope&gt;\n            &lt;/dependency&gt;\n        &lt;/dependencies&gt;\n    &lt;/dependencyManagement&gt;\n\n&lt;/project&gt;\n</code></pre> <pre><code>pipeline {\n    agent any\n\n    stages {\n        stage('Build') {\n            steps {\n                sh 'mvn -B -DskipTests clean install'\n            }\n        }\n    }\n\n}\n</code></pre> <pre><code>package store.order;\n\nimport java.util.List;\n\nimport org.springframework.cloud.openfeign.FeignClient;\nimport org.springframework.http.ResponseEntity;\nimport org.springframework.web.bind.annotation.*;\n\n@FeignClient(name = \"order\", url = \"http://order:8080\")\npublic interface OrderController {\n\n    @PostMapping(\"/order\")\n    ResponseEntity&lt;OrderOut&gt; create(@RequestBody OrderIn in);\n\n    @GetMapping(\"/order\")\n    ResponseEntity&lt;List&lt;OrderOut&gt;&gt; findAll();\n\n    @GetMapping(\"/order/{id}\")\n    ResponseEntity&lt;OrderOut&gt; findById(@PathVariable(\"id\") String id);\n}\n</code></pre> <pre><code>package store.order;\n\nimport java.util.List;\nimport lombok.Builder;\n\n@Builder\npublic record OrderIn(List&lt;OrderItemIn&gt; items) {}\n</code></pre> <pre><code>package store.order;\n\nimport java.util.List;\nimport lombok.Builder;\n\n@Builder\npublic record OrderOut(\n    String id,\n    String date,\n    List&lt;OrderItemOut&gt; items,\n    Double total\n) {}\n</code></pre> <pre><code>package store.order;\n\nimport lombok.Builder;\n\n@Builder\npublic record OrderItemIn(String idProduct, Integer quantity) {}\n</code></pre> <pre><code>package store.order;\n\nimport lombok.Builder;\nimport store.product.ProductOut;\n\n@Builder\npublic record OrderItemOut(\n    String id,\n    ProductOut product,\n    Integer quantity,\n    Double total\n) {}\n</code></pre> mvn clean install"},{"location":"orderapi/main/#order-service","title":"Order-Service","text":"<pre><code>\ud83d\udcc1 api/\n\u2514\u2500\u2500 \ud83d\udcc1 order-service/\n    \u251c\u2500\u2500 \ud83d\udcc1 k8s/\n    \u2502   \u2514\u2500\u2500 \ud83d\udcc4 k8s.yaml\n    \u251c\u2500\u2500 \ud83d\udcc1 src/\n    \u2502   \u2514\u2500\u2500 \ud83d\udcc1 main/\n    \u2502       \u251c\u2500\u2500 \ud83d\udcc1 java/\n    \u2502       \u2502   \u2514\u2500\u2500 \ud83d\udcc1 store/\n    \u2502       \u2502       \u2514\u2500\u2500 \ud83d\udcc1 order/\n    \u2502       \u2502           \u251c\u2500\u2500 \ud83d\udcc4 Order.java\n    \u2502       \u2502           \u251c\u2500\u2500 \ud83d\udcc4 OrderItem.java\n    \u2502       \u2502           \u251c\u2500\u2500 \ud83d\udcc4 OrderApplication.java\n    \u2502       \u2502           \u251c\u2500\u2500 \ud83d\udcc4 OrderModel.java\n    \u2502       \u2502           \u251c\u2500\u2500 \ud83d\udcc4 OrderParser.java\n    \u2502       \u2502           \u251c\u2500\u2500 \ud83d\udcc4 OrderRepository.java\n    \u2502       \u2502           \u251c\u2500\u2500 \ud83d\udcc4 OrderResource.java\n    \u2502       \u2502           \u251c\u2500\u2500 \ud83d\udcc4 OrderService.java\n    \u2502       \u2502           \u2514\u2500\u2500 \ud83d\udcc4 FeignAuthInterceptor.java\n    \u2502       \u2514\u2500\u2500 \ud83d\udcc1 resources/\n    \u2502           \u251c\u2500\u2500 \ud83d\udcc4 application.yaml\n    \u2502           \u2514\u2500\u2500 \ud83d\udcc1 db/\n    \u2502               \u2514\u2500\u2500 \ud83d\udcc1 migration/\n    \u2502                   \u251c\u2500\u2500 \ud83d\udcc4 V2025.08.29.001__create_schema.sql\n    \u2502                   \u251c\u2500\u2500 \ud83d\udcc4 V2025.08.29.002__create_table_order.sql\n    \u2502                   \u2514\u2500\u2500 \ud83d\udcc4 V2025.08.29.003__create_table_order_item.sql\n    \u251c\u2500\u2500 \ud83d\udcc4 pom.xml\n    \u251c\u2500\u2500 \ud83d\udcc4 Dockerfile\n    \u2514\u2500\u2500 \ud83d\udcc4 Jenkinsfile\n</code></pre> Source pom.xmlDockerfileJenkinsfilek8s.yamlapplication.yamlOrder.javaOrderItem.javaOrderApplication.javaOrderService.javaOrderResource.javaOrderRepository.javaFeignAuthInterceptor.javaV2025.08.29.001__create_schema.sqlV2025.08.29.002__create_table_order.sqlV2025.08.29.003__create_table_order_item.sql <pre><code>&lt;?xml version=\"1.0\" encoding=\"UTF-8\"?&gt;\n&lt;project xmlns=\"http://maven.apache.org/POM/4.0.0\" xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\"\n    xsi:schemaLocation=\"http://maven.apache.org/POM/4.0.0 https://maven.apache.org/xsd/maven-4.0.0.xsd\"&gt;\n    &lt;modelVersion&gt;4.0.0&lt;/modelVersion&gt;\n    &lt;parent&gt;\n        &lt;groupId&gt;org.springframework.boot&lt;/groupId&gt;\n        &lt;artifactId&gt;spring-boot-starter-parent&lt;/artifactId&gt;\n        &lt;version&gt;3.5.5&lt;/version&gt;\n        &lt;relativePath/&gt;\n    &lt;/parent&gt;\n\n    &lt;groupId&gt;store&lt;/groupId&gt;\n    &lt;artifactId&gt;order-service&lt;/artifactId&gt;\n    &lt;version&gt;1.0.0&lt;/version&gt;\n\n    &lt;properties&gt;\n        &lt;java.version&gt;21&lt;/java.version&gt;\n        &lt;spring-cloud.version&gt;2025.0.0&lt;/spring-cloud.version&gt;\n        &lt;maven.compiler.proc&gt;full&lt;/maven.compiler.proc&gt;\n    &lt;/properties&gt;\n\n    &lt;dependencies&gt;\n        &lt;dependency&gt;\n            &lt;groupId&gt;org.springframework.boot&lt;/groupId&gt;\n            &lt;artifactId&gt;spring-boot-starter-web&lt;/artifactId&gt;\n        &lt;/dependency&gt;\n\n        &lt;dependency&gt;\n            &lt;groupId&gt;org.springframework.boot&lt;/groupId&gt;\n            &lt;artifactId&gt;spring-boot-starter-data-jpa&lt;/artifactId&gt;\n        &lt;/dependency&gt;\n\n        &lt;dependency&gt;\n            &lt;groupId&gt;org.springframework.cloud&lt;/groupId&gt;\n            &lt;artifactId&gt;spring-cloud-starter-openfeign&lt;/artifactId&gt;\n        &lt;/dependency&gt;\n\n        &lt;dependency&gt;\n            &lt;groupId&gt;${project.groupId}&lt;/groupId&gt;\n            &lt;artifactId&gt;order&lt;/artifactId&gt;\n            &lt;version&gt;${project.version}&lt;/version&gt;\n        &lt;/dependency&gt;\n\n        &lt;dependency&gt;\n            &lt;groupId&gt;${project.groupId}&lt;/groupId&gt;\n            &lt;artifactId&gt;product&lt;/artifactId&gt;\n            &lt;version&gt;${project.version}&lt;/version&gt;\n        &lt;/dependency&gt;\n\n        &lt;!-- https://mvnrepository.com/artifact/org.projectlombok/lombok --&gt;\n        &lt;dependency&gt;\n            &lt;groupId&gt;org.projectlombok&lt;/groupId&gt;\n            &lt;artifactId&gt;lombok&lt;/artifactId&gt;\n            &lt;optional&gt;true&lt;/optional&gt;\n        &lt;/dependency&gt;\n\n        &lt;dependency&gt;\n            &lt;groupId&gt;org.postgresql&lt;/groupId&gt;\n            &lt;artifactId&gt;postgresql&lt;/artifactId&gt;\n            &lt;scope&gt;runtime&lt;/scope&gt;\n        &lt;/dependency&gt;\n        &lt;dependency&gt;\n            &lt;groupId&gt;org.flywaydb&lt;/groupId&gt;\n            &lt;artifactId&gt;flyway-core&lt;/artifactId&gt;\n        &lt;/dependency&gt;\n        &lt;dependency&gt;\n            &lt;groupId&gt;org.flywaydb&lt;/groupId&gt;\n            &lt;artifactId&gt;flyway-database-postgresql&lt;/artifactId&gt;\n        &lt;/dependency&gt;\n\n\n    &lt;/dependencies&gt;\n\n    &lt;dependencyManagement&gt;\n        &lt;dependencies&gt;\n            &lt;dependency&gt;\n                &lt;groupId&gt;org.springframework.cloud&lt;/groupId&gt;\n                &lt;artifactId&gt;spring-cloud-dependencies&lt;/artifactId&gt;\n                &lt;version&gt;${spring-cloud.version}&lt;/version&gt;\n                &lt;type&gt;pom&lt;/type&gt;\n                &lt;scope&gt;import&lt;/scope&gt;\n            &lt;/dependency&gt;\n        &lt;/dependencies&gt;\n    &lt;/dependencyManagement&gt;\n\n    &lt;build&gt;\n        &lt;plugins&gt;\n            &lt;plugin&gt;\n                &lt;groupId&gt;org.springframework.boot&lt;/groupId&gt;\n                &lt;artifactId&gt;spring-boot-maven-plugin&lt;/artifactId&gt;\n                &lt;configuration&gt;\n                    &lt;excludes&gt;\n                        &lt;exclude&gt;\n                            &lt;groupId&gt;org.projectlombok&lt;/groupId&gt;\n                            &lt;artifactId&gt;lombok&lt;/artifactId&gt;\n                        &lt;/exclude&gt;\n                    &lt;/excludes&gt;\n                &lt;/configuration&gt;\n            &lt;/plugin&gt;\n        &lt;/plugins&gt;\n    &lt;/build&gt;\n\n&lt;/project&gt;\n</code></pre> <pre><code>FROM openjdk:23-slim\nVOLUME /tmp\nCOPY target/*.jar /app.jar\nENTRYPOINT [\"java\",\"-jar\",\"/app.jar\"]\n</code></pre> <pre><code>pipeline {\n    agent any\n    environment {\n        SERVICE = 'order'\n        NAME = \"jpqv/${env.SERVICE}\"\n    }\n    stages {\n        stage('Dependecies') {\n            steps {\n                build job: 'product', wait: true\n                build job: 'order', wait: true\n            }\n        }\n        stage('Build') { \n            steps {\n                sh 'mvn -B -DskipTests clean package'\n            }\n        }      \n        stage('Build &amp; Push Image') {\n            steps {\n                withCredentials([usernamePassword(\n                    credentialsId: 'dockerhub-credential',\n                    usernameVariable: 'USERNAME',\n                    passwordVariable: 'TOKEN')])\n                {\n                    sh \"docker login -u $USERNAME -p $TOKEN\"\n                    sh \"docker buildx create --use --platform=linux/arm64,linux/amd64 --node multi-platform-builder-${env.SERVICE} --name multi-platform-builder-${env.SERVICE}\"\n                    sh \"docker buildx build --platform=linux/arm64,linux/amd64 --push --tag ${env.NAME}:latest --tag ${env.NAME}:${env.BUILD_ID} -f DockerFile .\"\n                    sh \"docker buildx rm --force multi-platform-builder-${env.SERVICE}\"\n                }\n            }\n        }\n    }\n}\n</code></pre> <pre><code>apiVersion: apps/v1\nkind: Deployment\nmetadata:\n  name: order\nspec:\n  replicas: 1\n  selector:\n    matchLabels:\n      app: order\n  template:\n    metadata:\n      labels:\n        app: order\n    spec:\n      containers:\n        - name: order\n          image: jpqv/order:latest\n          imagePullPolicy: Always\n          ports:\n            - containerPort: 8080\n          env:\n            - name: POSTGRES_DB\n              valueFrom:\n                configMapKeyRef:\n                  name: postgres-configmap\n                  key: POSTGRES_DB\n            - name: DATABASE_USERNAME\n              valueFrom:\n                secretKeyRef:\n                  name: postgres-secrets\n                  key: POSTGRES_USER\n            - name: DATABASE_PASSWORD\n              valueFrom:\n                secretKeyRef:\n                  name: postgres-secrets\n                  key: POSTGRES_PASSWORD\n            - name: DATABASE_URL\n              value: \"jdbc:postgresql://postgres:5432/$(POSTGRES_DB)\"\n          resources:\n            requests:\n              memory: \"200Mi\"\n              cpu: \"50m\"\n            limits:\n              memory: \"300Mi\"\n              cpu: \"200m\"\n\n---\n\napiVersion: v1\nkind: Service\nmetadata:\n  name: order\n  labels:\n    app: order\nspec:\n  type: ClusterIP\n  ports:\n    - port: 80\n      protocol: TCP\n      targetPort: 8080\n\n  selector:\n    app: order\n</code></pre> <pre><code>server:\n  port: 8080\n\nspring:\n  application:\n    name: order\n\n  mvc:\n    problemdetails:\n      enabled: true\n\n  datasource:\n    url: ${DATABASE_URL}\n    username: ${DATABASE_USERNAME}\n    password: ${DATABASE_PASSWORD}\n    driver-class-name: org.postgresql.Driver\n\n  flyway:\n    baseline-on-migrate: true\n    schemas: orders\n  jpa:\n    properties:\n      hibernate:\n        default_schema: orders\n\nlogging:\n  level:\n    store: debug\n</code></pre> <pre><code>package store.order;\n\nimport java.time.OffsetDateTime;\nimport java.util.List;\nimport lombok.Builder;\nimport lombok.Data;\nimport lombok.experimental.Accessors;\n\n@Data @Builder @Accessors(fluent = true, chain = true)\npublic class Order {\n  String id;\n  String accountId;\n  OffsetDateTime date;\n  List&lt;OrderItem&gt; items;\n  Double total;\n}\n</code></pre> <pre><code>package store.order;\n\nimport lombok.Builder;\nimport lombok.Data;\nimport lombok.experimental.Accessors;\n\n@Data @Builder @Accessors(fluent = true, chain = true)\npublic class OrderItem {\n  String id;\n  String productId;\n  Integer quantity;\n  Double total;\n}\n</code></pre> <pre><code>package store.order;\n\nimport org.springframework.boot.SpringApplication;\nimport org.springframework.boot.autoconfigure.SpringBootApplication;\nimport org.springframework.cloud.openfeign.EnableFeignClients;\n\n@EnableFeignClients(basePackages = \"store.product\")\n@SpringBootApplication\npublic class OrderApplication {\n\n    public static void main(String[] args) {\n        SpringApplication.run(OrderApplication.class, args);\n    }\n\n}\n</code></pre> <pre><code>package store.order;\n\nimport java.util.ArrayList;\nimport java.util.List;\n\nimport org.springframework.beans.factory.annotation.Autowired;\nimport org.springframework.http.HttpStatus;\nimport org.springframework.stereotype.Service;\nimport org.springframework.transaction.annotation.Transactional;\nimport org.springframework.web.server.ResponseStatusException;\n\nimport store.product.ProductController;\nimport store.product.ProductOut;\n\n@Service\npublic class OrderService {\n\n  @Autowired\n  private OrderRepository orderRepository;\n\n  @Autowired\n  private ProductController productController;\n\n  @Transactional\n  public OrderOut create(OrderIn in, String idAccount) {\n    if (in == null || in.items() == null || in.items().isEmpty()) {\n      throw new ResponseStatusException(HttpStatus.BAD_REQUEST, \"Items are mandatory\");\n    }\n\n    List&lt;ProductOut&gt; products = new ArrayList&lt;&gt;();\n    in.items().forEach(it -&gt; {\n      ProductOut p = productController.findById(it.idProduct()).getBody();\n      if (p == null) {\n        throw new ResponseStatusException(HttpStatus.BAD_REQUEST, \"Product not found: \" + it.idProduct());\n      }\n      products.add(p);\n    });\n\n    OrderModel om = OrderParser.toModel(in, idAccount);\n\n    double orderTotal = 0.0;\n    for (int i = 0; i &lt; in.items().size(); i++) {\n      var inItem = in.items().get(i);\n      var product = products.get(i);\n\n      double total = product.price() * inItem.quantity();\n\n      OrderItemModel im = new OrderItemModel();\n      im.setOrder(om);\n      im.setIdProduct(inItem.idProduct());\n      im.setQuantity(inItem.quantity());\n      im.setTotal(total);\n\n      om.getItems().add(im);\n      orderTotal += total;\n    }\n    om.setTotal(orderTotal);\n\n    OrderModel saved = orderRepository.save(om);\n    return OrderParser.toOut(saved, products);\n  }\n\n  public List&lt;OrderOut&gt; findAll(String idAccount) {\n    var list = orderRepository.findAllByIdAccount(idAccount);\n    // Para listar r\u00e1pido, n\u00e3o precisamos montar os produtos: retornamos sem detalhes de produto\n    return list.stream()\n      .map(om -&gt; OrderOut.builder()\n        .id(om.getId())\n        .date(om.getDate().toString())\n        .items(null) // lista resumida\n        .total(om.getTotal())\n        .build())\n      .toList();\n  }\n\n  public OrderOut findById(String id, String idAccount) {\n    OrderModel om = orderRepository.findByIdAndIdAccount(id, idAccount)\n      .orElseThrow(() -&gt; new ResponseStatusException(HttpStatus.NOT_FOUND, \"Order not found\"));\n\n    // carrega os produtos dos itens desse pedido\n    List&lt;ProductOut&gt; products = om.getItems().stream()\n        .map(it -&gt; productController.findById(it.getIdProduct()).getBody())\n        .toList();\n\n    return OrderParser.toOut(om, products);\n  }\n}\n</code></pre> <pre><code>package store.order;\n\nimport java.util.List;\n\nimport org.springframework.beans.factory.annotation.Autowired;\nimport org.springframework.http.ResponseEntity;\nimport org.springframework.web.bind.annotation.RestController;\nimport org.springframework.web.servlet.support.ServletUriComponentsBuilder;\n\n@RestController\npublic class OrderResource implements OrderController {\n\n  @Autowired\n  private OrderService orderService;\n\n  @Override\n  public ResponseEntity&lt;OrderOut&gt; create(OrderIn in) {\n    String idAccount = CurrentRequest.idAccount();\n    OrderOut out = orderService.create(in, idAccount);\n    return ResponseEntity.created(\n        ServletUriComponentsBuilder.fromCurrentRequest()\n            .path(\"/{id}\")\n            .buildAndExpand(out.id())\n            .toUri()\n    ).body(out);\n  }\n\n  @Override\n  public ResponseEntity&lt;List&lt;OrderOut&gt;&gt; findAll() {\n    String idAccount = CurrentRequest.idAccount();\n    return ResponseEntity.ok(orderService.findAll(idAccount));\n  }\n\n  @Override\n  public ResponseEntity&lt;OrderOut&gt; findById(String id) {\n    String idAccount = CurrentRequest.idAccount();\n    return ResponseEntity.ok(orderService.findById(id, idAccount));\n  }\n}\n</code></pre> <p>``` { .java .copy .select linenums=\"1\" } package store.order;</p> <p>import java.util.List; import java.util.Optional; import org.springframework.data.repository.CrudRepository; import org.springframework.stereotype.Repository;</p> <p>@Repository public interface OrderRepository extends CrudRepository {</p> <p>List findAllByIdAccount(String idAccount);</p> <p>Optional findByIdAndIdAccount(String id, String idAccount); }</p> <pre><code>package store.order;\n\nimport feign.RequestInterceptor;\nimport jakarta.servlet.http.HttpServletRequest;\nimport org.springframework.context.annotation.Bean;\nimport org.springframework.stereotype.Component;\nimport org.springframework.web.context.request.RequestContextHolder;\nimport org.springframework.web.context.request.ServletRequestAttributes;\n\n@Component\npublic class FeignAuthInterceptor {\n\n  @Bean\n  public RequestInterceptor forwardAuthHeader() {\n    return template -&gt; {\n      var attrs = (ServletRequestAttributes) RequestContextHolder.getRequestAttributes();\n      if (attrs == null) return;\n      HttpServletRequest req = attrs.getRequest();\n      String auth = req.getHeader(\"Authorization\");\n      if (auth != null &amp;&amp; !auth.isBlank()) {\n        template.header(\"Authorization\", auth);\n      }\n    };\n  }\n}\n</code></pre> <p>``` { .sql .copy .select linenums=\"1\" } CREATE SCHEMA IF NOT EXISTS orders;</p> <pre><code>CREATE TABLE orders (\n  id           varchar(36) PRIMARY KEY,\n  date         timestamptz NOT NULL,\n  id_account   varchar(36) NOT NULL,\n  total        decimal(12,2) NOT NULL\n);\n</code></pre> <pre><code>CREATE TABLE order_item (\n  id          varchar(36) PRIMARY KEY,\n  id_order    varchar(36) NOT NULL REFERENCES orders(id) ON DELETE CASCADE,\n  id_product  varchar(36) NOT NULL,\n  quantity    integer NOT NULL,\n  total       decimal(12,2) NOT NULL\n);\n</code></pre> mvn clean package spring-boot:run"},{"location":"productapi/main/","title":"4. Product API","text":""},{"location":"productapi/main/#product-api","title":"Product API","text":"<p>A Product API implementa o CRUD de produtos do dom\u00ednio <code>store</code>, seguindo o mesmo padr\u00e3o adotado no projeto: interface (<code>product</code>) e service (<code>product-service</code>) por tr\u00e1s do gateway e protegido por JWT.</p> <p>Trusted layer e seguran\u00e7a</p> <p>Toda requisi\u00e7\u00e3o externa entra pelo gateway. As rotas <code>/product/**</code> s\u00e3o protegidas: \u00e9 obrigat\u00f3rio enviar <code>Authorization: Bearer &lt;jwt&gt;</code>.</p>"},{"location":"productapi/main/#visao-geral","title":"Vis\u00e3o geral","text":"<ul> <li>Interface (<code>product</code>): define o contrato (DTOs e Feign) consumido por outros m\u00f3dulos/fronts.</li> <li>Service (<code>product-service</code>): implementa\u00e7\u00e3o REST, regras de neg\u00f3cio, persist\u00eancia (JPA), e migra\u00e7\u00f5es (Flyway).</li> </ul> <pre><code>classDiagram\n    namespace product {\n        class ProductController {\n            +create(ProductIn ProductIn): ProductOut\n            +delete(String id): void\n            +findAll(): List&lt;ProductOut&gt;\n            +findById(String id): ProductOut\n        }\n        class ProductIn {\n            -String name\n            -Double price\n            -String unit\n        }\n        class ProductOut {\n            -String id\n            -String name\n            -Double price\n            -String unit\n        }\n    }\n    namespace product-service {\n        class ProductResource {\n            +create(ProductIn ProductIn): ProductOut\n            +delete(String id): void\n            +findAll(): List&lt;ProductOut&gt;\n            +findById(String id): ProductOut\n        }\n        class ProductService {\n            +create(ProductIn ProductIn): ProductOut\n            +delete(String id): void\n            +findAll(): List&lt;ProductOut&gt;\n            +findById(String id): ProductOut\n        }\n        class ProductRepository {\n            +create(ProductIn ProductIn): ProductOut\n            +delete(String id): void\n            +findAll(): List&lt;ProductOut&gt;\n            +findById(String id): ProductOut\n        }\n        class Product {\n            -String id\n            -String name\n            -Double price\n            -String unit\n        }\n        class ProductModel {\n            +create(ProductIn ProductIn): ProductOut\n            +delete(String id): void\n            +findAll(): List&lt;ProductOut&gt;\n            +findById(String id): ProductOut\n        }\n    }\n    &lt;&lt;Interface&gt;&gt; ProductController\n    ProductController ..&gt; ProductIn\n    ProductController ..&gt; ProductOut\n\n    &lt;&lt;Interface&gt;&gt; ProductRepository\n    ProductController &lt;|-- ProductResource\n    ProductResource *-- ProductService\n    ProductService *-- ProductRepository\n    ProductService ..&gt; Product\n    ProductService ..&gt; ProductModel\n    ProductRepository ..&gt; ProductModel</code></pre>"},{"location":"productapi/main/#estrutura-da-requisicao","title":"Estrutura da requisi\u00e7\u00e3o","text":"<pre><code>flowchart LR\n    subgraph api [Trusted Layer]\n        direction TB\n        gateway --&gt; account\n        gateway --&gt; auth\n        account --&gt; db@{ shape: cyl, label: \"Database\" }\n        auth --&gt; account\n        gateway e5@==&gt; product:::red\n        product e2@==&gt; db\n    end\n    internet e1@==&gt;|request| gateway\n    e1@{ animate: true }\n    e2@{ animate: true }\n    e5@{ animate: true }\n    classDef red fill:#fcc\n    click product \"#product-api\" \"Product API\"</code></pre>"},{"location":"productapi/main/#product","title":"Product","text":"<pre><code>\ud83d\udcc1 api/\n\u2514\u2500\u2500 \ud83d\udcc1 product/\n    \u251c\u2500\u2500 \ud83d\udcc1 src/\n    \u2502   \u2514\u2500\u2500 \ud83d\udcc1 main/\n    \u2502       \u2514\u2500\u2500 \ud83d\udcc1 java/\n    \u2502           \u2514\u2500\u2500 \ud83d\udcc1 store/\n    \u2502               \u2514\u2500\u2500 \ud83d\udcc1 product/\n    \u2502                   \u251c\u2500\u2500 \ud83d\udcc4 ProductController.java\n    \u2502                   \u251c\u2500\u2500 \ud83d\udcc4 ProductIn.java\n    \u2502                   \u2514\u2500\u2500 \ud83d\udcc4 ProductOut.java\n    \u251c\u2500\u2500 \ud83d\udcc4 pom.xml\n    \u2514\u2500\u2500 \ud83d\udcc4 Jenkinsfile\n</code></pre> Source pom.xmlJenkinsfileProductControllerProductInProductOut <pre><code>&lt;?xml version=\"1.0\" encoding=\"UTF-8\"?&gt;\n&lt;project xmlns=\"http://maven.apache.org/POM/4.0.0\" xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\"\n    xsi:schemaLocation=\"http://maven.apache.org/POM/4.0.0 https://maven.apache.org/xsd/maven-4.0.0.xsd\"&gt;\n    &lt;modelVersion&gt;4.0.0&lt;/modelVersion&gt;\n    &lt;parent&gt;\n        &lt;groupId&gt;org.springframework.boot&lt;/groupId&gt;\n        &lt;artifactId&gt;spring-boot-starter-parent&lt;/artifactId&gt;\n        &lt;version&gt;3.5.5&lt;/version&gt;\n        &lt;relativePath/&gt;\n    &lt;/parent&gt;\n\n    &lt;groupId&gt;store&lt;/groupId&gt;\n    &lt;artifactId&gt;product&lt;/artifactId&gt;\n    &lt;version&gt;1.0.0&lt;/version&gt;\n\n    &lt;properties&gt;\n        &lt;java.version&gt;21&lt;/java.version&gt;\n        &lt;spring-cloud.version&gt;2025.0.0&lt;/spring-cloud.version&gt;\n        &lt;maven.compiler.proc&gt;full&lt;/maven.compiler.proc&gt;\n    &lt;/properties&gt;\n\n    &lt;dependencies&gt;\n        &lt;dependency&gt;\n            &lt;groupId&gt;org.springframework.boot&lt;/groupId&gt;\n            &lt;artifactId&gt;spring-boot-starter-web&lt;/artifactId&gt;\n        &lt;/dependency&gt;\n        &lt;dependency&gt;\n            &lt;groupId&gt;org.springframework.cloud&lt;/groupId&gt;\n            &lt;artifactId&gt;spring-cloud-starter-openfeign&lt;/artifactId&gt;\n        &lt;/dependency&gt;\n\n        &lt;dependency&gt;\n            &lt;groupId&gt;org.projectlombok&lt;/groupId&gt;\n            &lt;artifactId&gt;lombok&lt;/artifactId&gt;\n            &lt;optional&gt;true&lt;/optional&gt;\n        &lt;/dependency&gt;\n    &lt;/dependencies&gt;\n\n    &lt;dependencyManagement&gt;\n        &lt;dependencies&gt;\n            &lt;dependency&gt;\n                &lt;groupId&gt;org.springframework.cloud&lt;/groupId&gt;\n                &lt;artifactId&gt;spring-cloud-dependencies&lt;/artifactId&gt;\n                &lt;version&gt;${spring-cloud.version}&lt;/version&gt;\n                &lt;type&gt;pom&lt;/type&gt;\n                &lt;scope&gt;import&lt;/scope&gt;\n            &lt;/dependency&gt;\n        &lt;/dependencies&gt;\n    &lt;/dependencyManagement&gt;\n\n&lt;/project&gt;\n</code></pre> <pre><code>pipeline {\n    agent any\n\n    stages {\n        stage('Build') {\n            steps {\n                sh 'mvn -B -DskipTests clean install'\n            }\n        }\n    }\n\n}\n</code></pre> ProductController.java<pre><code>package store.product;\n\nimport java.util.List;\n\nimport org.springframework.cloud.openfeign.FeignClient;\nimport org.springframework.http.ResponseEntity;\nimport org.springframework.web.bind.annotation.DeleteMapping;\nimport org.springframework.web.bind.annotation.GetMapping;\nimport org.springframework.web.bind.annotation.PathVariable;\nimport org.springframework.web.bind.annotation.PostMapping;\nimport org.springframework.web.bind.annotation.RequestBody;\n\n@FeignClient(name = \"product\", url = \"http://product:8080\")\npublic interface ProductController {\n\n    @PostMapping(\"/product\")\n    public ResponseEntity&lt;ProductOut&gt; create(\n        @RequestBody ProductIn in\n    );\n\n    @GetMapping(\"/product/{id}\")\n    public ResponseEntity&lt;ProductOut&gt; findById(\n        @PathVariable(\"id\") String id\n    );\n\n    @GetMapping(\"/product\")\n    public ResponseEntity&lt;List&lt;ProductOut&gt;&gt; findAll();\n\n    @DeleteMapping(\"/product/{id}\")\n    public ResponseEntity&lt;Void&gt; delete(\n        @PathVariable(\"id\") String id\n    );\n\n}\n</code></pre> ProductIn.java<pre><code>package store.product;\n\nimport lombok.Builder;\n\n@Builder\npublic record ProductIn(\n    String name,\n    Double price,\n    String unit\n) {\n\n}\n</code></pre> ProductOut.java<pre><code>package store.product;\n\nimport lombok.Builder;\n\n@Builder\npublic record ProductOut(\n    String id,\n    String name,\n    Double price,\n    String unit\n) {\n\n}\n</code></pre> mvn clean install"},{"location":"productapi/main/#product-service","title":"Product-Service","text":"<pre><code>\ud83d\udcc1 api/\n\u2514\u2500\u2500 \ud83d\udcc1 product-service/\n    \u251c\u2500\u2500 \ud83d\udcc1 k8s/\n    \u2502   \u2514\u2500\u2500 \ud83d\udcc4 k8s.yaml\n    \u251c\u2500\u2500 \ud83d\udcc1 src/\n    \u2502   \u2514\u2500\u2500 \ud83d\udcc1 main/\n    \u2502       \u251c\u2500\u2500 \ud83d\udcc1 java/\n    \u2502       \u2502   \u2514\u2500\u2500 \ud83d\udcc1 store/\n    \u2502       \u2502       \u2514\u2500\u2500 \ud83d\udcc1 product/\n    \u2502       \u2502           \u251c\u2500\u2500 \ud83d\udcc4 Product.java\n    \u2502       \u2502           \u251c\u2500\u2500 \ud83d\udcc4 ProductApplication.java\n    \u2502       \u2502           \u251c\u2500\u2500 \ud83d\udcc4 ProductModel.java\n    \u2502       \u2502           \u251c\u2500\u2500 \ud83d\udcc4 ProductParser.java\n    \u2502       \u2502           \u251c\u2500\u2500 \ud83d\udcc4 ProductRepository.java\n    \u2502       \u2502           \u251c\u2500\u2500 \ud83d\udcc4 ProductResource.java\n    \u2502       \u2502           \u251c\u2500\u2500 \ud83d\udcc4 ProductService.java\n    \u2502       \u2502           \u2514\u2500\u2500 \ud83d\udcc4 RedisCacheConfig.java\n    \u2502       \u2514\u2500\u2500 \ud83d\udcc1 resources/\n    \u2502           \u251c\u2500\u2500 \ud83d\udcc4 application.yaml\n    \u2502           \u2514\u2500\u2500 \ud83d\udcc1 db/\n    \u2502               \u2514\u2500\u2500 \ud83d\udcc1 migration/\n    \u2502                   \u251c\u2500\u2500 \ud83d\udcc4 V2025.08.29.001__create_schema.sql\n    \u2502                   \u2514\u2500\u2500 \ud83d\udcc4 V2025.08.29.002__create_table_product.sql\n    \u251c\u2500\u2500 \ud83d\udcc4 pom.xml\n    \u251c\u2500\u2500 \ud83d\udcc4 Dockerfile\n    \u2514\u2500\u2500 \ud83d\udcc4 Jenkinsfile\n</code></pre> Source pom.xmlDockerfileJenkinsfilek8s.yamlapplication.yamlProduct.javaProductApplication.javaProductModel.javaProductParser.javaProductRepository.javaProductResource.javaProductService.javaRedisCacheConfig.javaV2025.08.29.001__create_schema.sqlV2025.08.29.002__create_table_product.sql <pre><code>&lt;?xml version=\"1.0\" encoding=\"UTF-8\"?&gt;\n&lt;project xmlns=\"http://maven.apache.org/POM/4.0.0\" xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\"\n    xsi:schemaLocation=\"http://maven.apache.org/POM/4.0.0 https://maven.apache.org/xsd/maven-4.0.0.xsd\"&gt;\n    &lt;modelVersion&gt;4.0.0&lt;/modelVersion&gt;\n    &lt;parent&gt;\n        &lt;groupId&gt;org.springframework.boot&lt;/groupId&gt;\n        &lt;artifactId&gt;spring-boot-starter-parent&lt;/artifactId&gt;\n        &lt;version&gt;3.5.5&lt;/version&gt;\n        &lt;relativePath/&gt;\n    &lt;/parent&gt;\n\n    &lt;groupId&gt;store&lt;/groupId&gt;\n    &lt;artifactId&gt;product-service&lt;/artifactId&gt;\n    &lt;version&gt;1.0.0&lt;/version&gt;\n\n    &lt;properties&gt;\n        &lt;java.version&gt;21&lt;/java.version&gt;\n        &lt;spring-cloud.version&gt;2025.0.0&lt;/spring-cloud.version&gt;\n        &lt;maven.compiler.proc&gt;full&lt;/maven.compiler.proc&gt;\n    &lt;/properties&gt;\n\n    &lt;dependencies&gt;\n        &lt;dependency&gt;\n            &lt;groupId&gt;org.springframework.boot&lt;/groupId&gt;\n            &lt;artifactId&gt;spring-boot-starter-web&lt;/artifactId&gt;\n        &lt;/dependency&gt;\n\n        &lt;dependency&gt;\n            &lt;groupId&gt;org.springframework.boot&lt;/groupId&gt;\n            &lt;artifactId&gt;spring-boot-starter-data-jpa&lt;/artifactId&gt;\n        &lt;/dependency&gt;\n\n        &lt;dependency&gt;\n            &lt;groupId&gt;org.springframework.boot&lt;/groupId&gt;\n            &lt;artifactId&gt;spring-boot-starter-cache&lt;/artifactId&gt;\n        &lt;/dependency&gt;\n\n        &lt;dependency&gt;\n            &lt;groupId&gt;org.springframework.boot&lt;/groupId&gt;\n            &lt;artifactId&gt;spring-boot-starter-data-redis&lt;/artifactId&gt;\n        &lt;/dependency&gt;\n\n        &lt;dependency&gt;\n            &lt;groupId&gt;${project.groupId}&lt;/groupId&gt;\n            &lt;artifactId&gt;product&lt;/artifactId&gt;\n            &lt;version&gt;${project.version}&lt;/version&gt;\n        &lt;/dependency&gt;\n\n        &lt;!-- https://mvnrepository.com/artifact/org.projectlombok/lombok --&gt;\n        &lt;dependency&gt;\n            &lt;groupId&gt;org.projectlombok&lt;/groupId&gt;\n            &lt;artifactId&gt;lombok&lt;/artifactId&gt;\n            &lt;optional&gt;true&lt;/optional&gt;\n        &lt;/dependency&gt;\n\n        &lt;dependency&gt;\n            &lt;groupId&gt;org.postgresql&lt;/groupId&gt;\n            &lt;artifactId&gt;postgresql&lt;/artifactId&gt;\n            &lt;scope&gt;runtime&lt;/scope&gt;\n        &lt;/dependency&gt;\n        &lt;dependency&gt;\n            &lt;groupId&gt;org.flywaydb&lt;/groupId&gt;\n            &lt;artifactId&gt;flyway-core&lt;/artifactId&gt;\n        &lt;/dependency&gt;\n        &lt;dependency&gt;\n            &lt;groupId&gt;org.flywaydb&lt;/groupId&gt;\n            &lt;artifactId&gt;flyway-database-postgresql&lt;/artifactId&gt;\n        &lt;/dependency&gt;\n\n\n    &lt;/dependencies&gt;\n\n    &lt;dependencyManagement&gt;\n        &lt;dependencies&gt;\n            &lt;dependency&gt;\n                &lt;groupId&gt;org.springframework.cloud&lt;/groupId&gt;\n                &lt;artifactId&gt;spring-cloud-dependencies&lt;/artifactId&gt;\n                &lt;version&gt;${spring-cloud.version}&lt;/version&gt;\n                &lt;type&gt;pom&lt;/type&gt;\n                &lt;scope&gt;import&lt;/scope&gt;\n            &lt;/dependency&gt;\n        &lt;/dependencies&gt;\n    &lt;/dependencyManagement&gt;\n\n    &lt;build&gt;\n        &lt;plugins&gt;\n            &lt;plugin&gt;\n                &lt;groupId&gt;org.springframework.boot&lt;/groupId&gt;\n                &lt;artifactId&gt;spring-boot-maven-plugin&lt;/artifactId&gt;\n                &lt;configuration&gt;\n                    &lt;excludes&gt;\n                        &lt;exclude&gt;\n                            &lt;groupId&gt;org.projectlombok&lt;/groupId&gt;\n                            &lt;artifactId&gt;lombok&lt;/artifactId&gt;\n                        &lt;/exclude&gt;\n                    &lt;/excludes&gt;\n                &lt;/configuration&gt;\n            &lt;/plugin&gt;\n        &lt;/plugins&gt;\n    &lt;/build&gt;\n\n&lt;/project&gt;\n</code></pre> <pre><code>FROM openjdk:23-slim\nVOLUME /tmp\nCOPY target/*.jar /app.jar\nENTRYPOINT [\"java\",\"-jar\",\"/app.jar\"]\n</code></pre> <pre><code>pipeline {\n    agent any\n    environment {\n        SERVICE = 'product'\n        NAME = \"jpqv/${env.SERVICE}\"\n    }\n    stages {\n        stage('Dependecies') {\n            steps {\n                build job: 'product', wait: true\n            }\n        }\n        stage('Build') { \n            steps {\n                sh 'mvn -B -DskipTests clean package'\n            }\n        }      \n        stage('Build &amp; Push Image') {\n            steps {\n                withCredentials([usernamePassword(\n                    credentialsId: 'dockerhub-credential',\n                    usernameVariable: 'USERNAME',\n                    passwordVariable: 'TOKEN')])\n                {\n                    sh \"docker login -u $USERNAME -p $TOKEN\"\n                    sh \"docker buildx create --use --platform=linux/arm64,linux/amd64 --node multi-platform-builder-${env.SERVICE} --name multi-platform-builder-${env.SERVICE}\"\n                    sh \"docker buildx build --platform=linux/arm64,linux/amd64 --push --tag ${env.NAME}:latest --tag ${env.NAME}:${env.BUILD_ID} -f DockerFile .\"\n                    sh \"docker buildx rm --force multi-platform-builder-${env.SERVICE}\"\n                }\n            }\n        }\n    }\n}\n</code></pre> <pre><code>apiVersion: apps/v1\nkind: Deployment\nmetadata:\n  name: product\nspec:\n  replicas: 1\n  selector:\n    matchLabels:\n      app: product\n  template:\n    metadata:\n      labels:\n        app: product\n    spec:\n      containers:\n        - name: product\n          image: jpqv/product:latest\n          imagePullPolicy: Always\n          ports:\n            - containerPort: 8080\n          env:\n            - name: POSTGRES_DB\n              valueFrom:\n                configMapKeyRef:\n                  name: postgres-configmap\n                  key: POSTGRES_DB\n            - name: DATABASE_USERNAME\n              valueFrom:\n                secretKeyRef:\n                  name: postgres-secrets\n                  key: POSTGRES_USER\n            - name: DATABASE_PASSWORD\n              valueFrom:\n                secretKeyRef:\n                  name: postgres-secrets\n                  key: POSTGRES_PASSWORD\n            - name: DATABASE_URL\n              value: \"jdbc:postgresql://postgres:5432/$(POSTGRES_DB)\"\n            - name: SPRING_CACHE_TYPE\n              value: redis\n            - name: SPRING_DATA_REDIS_HOST\n              value: redis\n            - name: SPRING_DATA_REDIS_PORT\n              value: \"6379\"\n          resources:\n            requests:\n              memory: \"200Mi\"\n              cpu: \"50m\"\n            limits:\n              memory: \"300Mi\"\n              cpu: \"200m\"\n\n---\n\napiVersion: v1\nkind: Service\nmetadata:\n  name: product\n  labels:\n    app: product\nspec:\n  type: ClusterIP\n  ports:\n    - port: 80\n      protocol: TCP\n      targetPort: 8080\n\n  selector:\n    app: product\n</code></pre> <pre><code>server:\n  port: 8080\n\nspring:\n  application:\n    name: product\n\n  mvc:\n    problemdetails:\n      enabled: true\n\n  datasource:\n    url: ${DATABASE_URL}\n    username: ${DATABASE_USERNAME}\n    password: ${DATABASE_PASSWORD}\n    driver-class-name: org.postgresql.Driver\n\n  flyway:\n    baseline-on-migrate: true\n    schemas: product\n  jpa:\n    properties:\n      hibernate:\n        default_schema: product\n\n  cache:\n    type: redis\n  data:\n    redis:\n      host: redis\n      port: 6379\n\nlogging:\n  level:\n    store: debug\n</code></pre> <pre><code>package store.product;\n\nimport lombok.Builder;\nimport lombok.Data;\nimport lombok.experimental.Accessors;\n\n@Builder @Data @Accessors(fluent = true, chain = true)\npublic class Product {\n    String id;\n    String name;\n    Double price;\n    String unit;\n}\n</code></pre> <pre><code>package store.product;\n\nimport org.springframework.boot.SpringApplication;\nimport org.springframework.boot.autoconfigure.SpringBootApplication;\nimport org.springframework.cache.annotation.EnableCaching;\nimport org.springframework.cloud.openfeign.EnableFeignClients;\n\n@EnableFeignClients(basePackages = {\n})\n@EnableCaching\n@SpringBootApplication\npublic class ProductApplication {\n\n    public static void main(String[] args) {\n        SpringApplication.run(ProductApplication.class, args);\n    }\n\n}\n</code></pre> <pre><code>package store.product;\n\nimport jakarta.persistence.Column;\nimport jakarta.persistence.Entity;\nimport jakarta.persistence.GeneratedValue;\nimport jakarta.persistence.GenerationType;\nimport jakarta.persistence.Id;\nimport jakarta.persistence.Table;\nimport lombok.AllArgsConstructor;\nimport lombok.NoArgsConstructor;\nimport lombok.Setter;\nimport lombok.experimental.Accessors;\n\n@Entity\n@Table(name = \"product\")\n@Setter @Accessors(chain = true, fluent = true)\n@NoArgsConstructor @AllArgsConstructor\npublic class ProductModel {\n\n    @Id\n    @Column(name = \"id\")\n    @GeneratedValue(strategy = GenerationType.UUID)\n    private String id;\n\n    @Column(name = \"name\")\n    private String name;\n\n    @Column(name = \"price\")\n    private Double price;\n\n    @Column(name = \"unit\")\n    private String unit;\n\n    public ProductModel(Product p) {\n        this.id = p.id();\n        this.name = p.name();\n        this.price = p.price();\n        this.unit = p.unit();\n    }\n\n    public Product to() {\n        return Product.builder()\n            .id(this.id)\n            .name(this.name)\n            .price(this.price)\n            .unit(this.unit)\n            .build();\n    }   \n}\n</code></pre> <pre><code>package store.product;\n\nimport java.util.List;\n\npublic class ProductParser {\n\n    public static Product to(ProductIn in) {\n        return in == null ? null :\n            Product.builder()\n                .name(in.name())\n                .price(in.price())\n                .unit(in.unit())\n                .build();\n    }\n\n    public static ProductOut to(Product a) {\n        return a == null ? null :\n            ProductOut.builder()\n                .id(a.id())\n                .name(a.name())\n                .price(a.price())\n                .unit(a.unit())\n                .build();\n    }\n\n    public static List&lt;ProductOut&gt; to(List&lt;Product&gt; as) {\n        return as == null ? null :\n            as.stream().map(ProductParser::to).toList();\n    }\n\n}\n</code></pre> <pre><code>package store.product;\n\nimport org.springframework.data.repository.CrudRepository;\nimport org.springframework.stereotype.Repository;\n\n@Repository\npublic interface ProductRepository extends CrudRepository&lt;ProductModel, String&gt; {\n\n    ProductModel findByName(String name);\n\n}\n</code></pre> <pre><code>package store.product;\n\nimport java.util.List;\n\nimport org.springframework.beans.factory.annotation.Autowired;\nimport org.springframework.http.ResponseEntity;\nimport org.springframework.web.bind.annotation.RestController;\nimport org.springframework.web.servlet.support.ServletUriComponentsBuilder;\n\n@RestController\npublic class ProductResource implements ProductController {\n\n    @Autowired\n    private ProductService productService;\n\n    @Override\n    public ResponseEntity&lt;ProductOut&gt; create(ProductIn in) {\n        Product product = ProductParser.to(in);\n\n        Product saved = productService.create(product);\n\n        return ResponseEntity.created(\n            ServletUriComponentsBuilder.fromCurrentRequest()\n                .path(\"/{id}\")\n                .buildAndExpand(saved.id())\n                .toUri()\n        ).body(ProductParser.to(saved));\n    }\n\n    @Override\n    public ResponseEntity&lt;ProductOut&gt; findById(String id) {\n        Product product = productService.findById(id);\n        return ResponseEntity\n        .ok()\n        .body(ProductParser.to(product));\n    }\n\n    @Override\n    public ResponseEntity&lt;List&lt;ProductOut&gt;&gt; findAll() {\n        return ResponseEntity\n            .ok()\n            .body(ProductParser.to(productService.findAll()));\n    }\n\n    @Override\n    public ResponseEntity&lt;Void&gt; delete(String id) {\n        productService.delete(id);\n        return ResponseEntity.noContent().build(); // 204\n    }\n\n}\n</code></pre> <pre><code>package store.product;\n\nimport java.util.List;\nimport java.util.stream.StreamSupport;\n\nimport org.springframework.beans.factory.annotation.Autowired;\nimport org.springframework.cache.annotation.CacheEvict;\nimport org.springframework.cache.annotation.CachePut;\nimport org.springframework.http.HttpStatus;\nimport org.springframework.stereotype.Service;\nimport org.springframework.web.server.ResponseStatusException;\nimport org.springframework.cache.annotation.Cacheable;\nimport org.springframework.cache.annotation.Caching;\n\n@Service\npublic class ProductService {\n\n    @Autowired\n    private ProductRepository productRepository;\n\n    @Caching(\n        evict = {\n            @CacheEvict(cacheNames = \"products-list\", allEntries = true)\n        },\n        put = {\n            @CachePut(cacheNames = \"product-by-id\", key = \"#result.id\", unless = \"#result == null\")\n        }\n    )\n    public Product create(Product product) {\n        if (null == product.name()) {\n            throw new ResponseStatusException(HttpStatus.BAD_REQUEST,\n                \"Name is mandatory!\"\n            );\n        }\n        if (null == product.price()) {\n            throw new ResponseStatusException(HttpStatus.BAD_REQUEST,\n                \"Price is mandatory!\"\n            );\n        }\n\n        if (productRepository.findByName(product.name()) != null)\n            throw new ResponseStatusException(HttpStatus.BAD_REQUEST,\n                \"Name already have been registered!\"\n            );\n        return productRepository.save(\n            new ProductModel(product)\n        ).to();\n    }\n\n    @Cacheable(cacheNames = \"products-list\", unless = \"#result == null || #result.isEmpty()\")\n    public List&lt;Product&gt; findAll() {\n        return StreamSupport.stream(\n            productRepository.findAll().spliterator(), false)\n            .map(ProductModel::to)\n            .toList();\n    }    \n\n    @Cacheable(cacheNames = \"product-by-id\", key = \"#id\", unless = \"#result == null\")\n    public Product findById(String id) {\n        return productRepository.findById(id)\n            .map(ProductModel::to)\n            .orElseThrow(() -&gt; new ResponseStatusException(\n                HttpStatus.NOT_FOUND, \"Product not found\"\n            ));\n    }\n\n    @Caching(\n        evict = {\n            @CacheEvict(cacheNames = \"product-by-id\", key = \"#id\"),\n            @CacheEvict(cacheNames = \"products-list\", allEntries = true)\n        }\n    )\n    public void delete(String id) {\n        if (!productRepository.existsById(id)) {\n            throw new ResponseStatusException(\n                HttpStatus.NOT_FOUND, \"Product not found\"\n            );\n        }\n        productRepository.deleteById(id);\n    }\n}\n</code></pre> <pre><code>package store.product;\n\nimport org.springframework.context.annotation.Bean;\nimport org.springframework.context.annotation.Configuration;\nimport org.springframework.data.redis.cache.*;\nimport org.springframework.data.redis.connection.RedisConnectionFactory;\n\nimport java.time.Duration;\nimport java.util.Map;\n\n@Configuration\npublic class RedisCacheConfig {\n\n  @Bean\n  public RedisCacheManager cacheManager(RedisConnectionFactory cf) {\n    var defaults = RedisCacheConfiguration.defaultCacheConfig()\n        .entryTtl(Duration.ofMinutes(5));\n\n    var perCache = Map.&lt;String, RedisCacheConfiguration&gt;of(\n        \"product-by-id\", defaults.entryTtl(Duration.ofMinutes(10)),\n        \"products-list\", defaults.entryTtl(Duration.ofMinutes(2))\n    );\n\n    return RedisCacheManager.builder(cf)\n        .cacheDefaults(defaults)\n        .withInitialCacheConfigurations(perCache)\n        .build();\n  }\n}\n</code></pre> <pre><code>CREATE SCHEMA IF NOT EXISTS product;\n</code></pre> <pre><code>CREATE TABLE product\n(\n    id varchar(36) NOT NULL,\n    name varchar(255) NOT NULL,\n    price decimal(10,2) NOT NULL,\n    unit varchar(50) NOT NULL,\n    CONSTRAINT product_pkey PRIMARY KEY (id)\n)\n</code></pre> mvn clean package spring-boot:run"}]}